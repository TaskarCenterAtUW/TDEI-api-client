/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) data system. It is intended for applications producing data to and consuming data from the TDEI system. It currently supports GTFS-Pathways, GTFS-Flex v2 and OpenSidewalks v0.2 data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: tdei@uw.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { LoginModel } from '../models';
import { TokenResponse } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Authenticates the user to the TDEI system. Returns access token.
     * @summary Authenticates the user to the TDEI system.
     * @param {LoginModel} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate: (body: LoginModel, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Request for password recovery, sends an email with a link to reset the password for given email.
     * @summary Request for password recovery
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverPassword: (body: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Re-issues access token provided the valid refresh token
     * @summary Re-issue access token
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (body: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Request for email verification link, sends an email verification link for given email
     * @summary Request for email verification link
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail: (body: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Authenticates the user to the TDEI system. Returns access token.
     * @summary Authenticates the user to the TDEI system.
     * @param {LoginModel} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(body: LoginModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenResponse>>>;
    /**
     * Request for password recovery, sends an email with a link to reset the password for given email.
     * @summary Request for password recovery
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverPassword(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     * Re-issues access token provided the valid refresh token
     * @summary Re-issue access token
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenResponse>>>;
    /**
     * Request for email verification link, sends an email verification link for given email
     * @summary Request for email verification link
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Authenticates the user to the TDEI system. Returns access token.
     * @summary Authenticates the user to the TDEI system.
     * @param {LoginModel} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(body: LoginModel, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenResponse>>;
    /**
     * Request for password recovery, sends an email with a link to reset the password for given email.
     * @summary Request for password recovery
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverPassword(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Re-issues access token provided the valid refresh token
     * @summary Re-issue access token
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenResponse>>;
    /**
     * Request for email verification link, sends an email verification link for given email
     * @summary Request for email verification link
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     * Authenticates the user to the TDEI system. Returns access token.
     * @summary Authenticates the user to the TDEI system.
     * @param {LoginModel} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    authenticate(body: LoginModel, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenResponse>>;
    /**
     * Request for password recovery, sends an email with a link to reset the password for given email.
     * @summary Request for password recovery
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    recoverPassword(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Re-issues access token provided the valid refresh token
     * @summary Re-issue access token
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    refreshToken(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenResponse>>;
    /**
     * Request for email verification link, sends an email verification link for given email
     * @summary Request for email verification link
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    verifyEmail(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
