/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) system. It is intended for applications submitting data to and consuming data from the TDEI system. We currently support GTFS-Pathways, GTFS-Flex and OpenSidewalks (OSW) data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: admin@tdei.us
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { LoginModel } from '../models';
import { TokenResponse } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Authenticates the user with the TDEI system. Returns an access token, if successfully authenticated.
     * @summary Authenticates the user with the TDEI system.
     * @param {LoginModel} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate: (body: LoginModel, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request initiates a password recovery process for the specified email address. Upon submission, the system sends an email containing a link that the user can follow to reset their password. This allows users to securely update their password if they have forgotten it or wish to change it for security reasons.
     * @summary Request for password recovery
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverPassword: (body: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Re-issues an access token, if a valid refresh token is sent to the server
     * @summary Re-issue an access token
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (body: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request sends an email verification link to the specified email address. The email verification link is initially sent following successful registration. If the user does not receive the initial verification email, they can request to have the verification link resent.
     * @summary Request for email verification link
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail: (body: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Authenticates the user with the TDEI system. Returns an access token, if successfully authenticated.
     * @summary Authenticates the user with the TDEI system.
     * @param {LoginModel} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(body: LoginModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenResponse>>>;
    /**
     * This request initiates a password recovery process for the specified email address. Upon submission, the system sends an email containing a link that the user can follow to reset their password. This allows users to securely update their password if they have forgotten it or wish to change it for security reasons.
     * @summary Request for password recovery
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverPassword(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     * Re-issues an access token, if a valid refresh token is sent to the server
     * @summary Re-issue an access token
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenResponse>>>;
    /**
     * This request sends an email verification link to the specified email address. The email verification link is initially sent following successful registration. If the user does not receive the initial verification email, they can request to have the verification link resent.
     * @summary Request for email verification link
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Authenticates the user with the TDEI system. Returns an access token, if successfully authenticated.
     * @summary Authenticates the user with the TDEI system.
     * @param {LoginModel} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(body: LoginModel, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenResponse>>;
    /**
     * This request initiates a password recovery process for the specified email address. Upon submission, the system sends an email containing a link that the user can follow to reset their password. This allows users to securely update their password if they have forgotten it or wish to change it for security reasons.
     * @summary Request for password recovery
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverPassword(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Re-issues an access token, if a valid refresh token is sent to the server
     * @summary Re-issue an access token
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenResponse>>;
    /**
     * This request sends an email verification link to the specified email address. The email verification link is initially sent following successful registration. If the user does not receive the initial verification email, they can request to have the verification link resent.
     * @summary Request for email verification link
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     * Authenticates the user with the TDEI system. Returns an access token, if successfully authenticated.
     * @summary Authenticates the user with the TDEI system.
     * @param {LoginModel} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    authenticate(body: LoginModel, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenResponse>>;
    /**
     * This request initiates a password recovery process for the specified email address. Upon submission, the system sends an email containing a link that the user can follow to reset their password. This allows users to securely update their password if they have forgotten it or wish to change it for security reasons.
     * @summary Request for password recovery
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    recoverPassword(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Re-issues an access token, if a valid refresh token is sent to the server
     * @summary Re-issue an access token
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    refreshToken(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenResponse>>;
    /**
     * This request sends an email verification link to the specified email address. The email verification link is initially sent following successful registration. If the user does not receive the initial verification email, they can request to have the verification link resent.
     * @summary Request for email verification link
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    verifyEmail(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
