/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) system. It is intended for applications submitting data to and consuming data from the TDEI system. We currently support GTFS-Pathways, GTFS-Flex and OpenSidewalks (OSW) data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: admin@tdei.us
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { APIVersionList } from '../models';
import { DatasetItem } from '../models';
import { JobDetails } from '../models';
import { ProjectGroup } from '../models';
import { ServiceModel } from '../models';
/**
 * CommonAPIsApi - axios parameter creator
 * @export
 */
export declare const CommonAPIsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cloning of a dataset lets one to use the dataset being cloned as the base for a new dataset without having to upload the dataset. This operation clones the datafiles in the dataset `tdei_dataset_id` to the designated project group `tdei_project_group_id` and service `tdei_service_id`, and uses the metadata file provided along with the API as the metadata. Returns cloned dataset id if the action is successful.
     * @summary Clones the provided dataset to the designated project group and service.
     * @param {Blob} file
     * @param {string} tdei_dataset_id Valid TDEI dataset id to be cloned.
     * @param {string} tdei_project_group_id Valid TDEI project group id.
     * @param {string} tdei_service_id Valid TDEI service id associated with the project group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneDatasetForm: (file: Blob, tdei_dataset_id: string, tdei_project_group_id: string, tdei_service_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the dataset from TDEI system. This operation cannot be undone.
     * @summary Deletes the Dataset
     * @param {string} tdei_dataset_id Valid TDEI Dataset ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataset: (tdei_dataset_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the metadata of a dataset with the metadata in the provided file. Returns status 200 if the action is successful.
     * @summary Updates the metadata of a given dataset
     * @param {Blob} file
     * @param {string} tdei_dataset_id Must be a valid TDEI dataset id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMetadataForm: (file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Downloads the output file generated by the job
     * @summary Downloads the job output file
     * @param {string} job_id job_id uniquely represents the job request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobDownload: (job_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of supported versions of the TDEI API.
     * @summary List TDEI supported API versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiVersions: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API lists all TDEI datasets, allowing users to efficiently search with sorting and filtering features. Each dataset entry is uniquely identified by `tdei_dataset_id` and also provide detailed information including metadata, associated project group, service details, download URL, and status. Users can sort datasets by 'valid_to', 'valid_from', 'uploaded date', 'project group name', and 'status'. Filtering options are provided for enhanced discoverability of the datasets.By default all released datasets are visible to all user. Pre-release datasets are only visible to user affiliated with the project groups.
     * @summary Lists the TDEI datasets in the system.
     * @param {string} [data_type] Type of the dataset.
     * @param {string} [status] This filter allows users to request datasets based on their status. When set to &#x27;All&#x27;, the filter displays all available datasets by default. If specified as &#x27;Pre-Release&#x27; or &#x27;Publish&#x27;, it shows only the datasets that are in the Pre-Release or Publish stages, respectively, for the project groups the user is affiliated with.
     * @param {string} [name] Dataset name or title
     * @param {string} [version] Dataset version.
     * @param {string} [data_source] Data source of the dataset.
     * @param {string} [collection_method] Method by which the data was collected.
     * @param {string} [collected_by] Collection agency or person.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {string} [collection_date] Collection date time
     * @param {number} [confidence_level] Minimum confidence level required. Data returned will be at this confidence level or higher. Confidence level range is: 0 (very low confidence) to 100 (very high confidence).
     * @param {string} [schema_version] Version name of the data type schema version that the application requests. list of versions can be found with /api/v1/{data_type}/versions.
     * @param {string} [tdei_project_group_id] TDEI project group id of the datasets to be retrieved.
     * @param {string} [tdei_service_id] TDEI service id of the datasets to be retrieved.
     * @param {string} [valid_from] Valid from date time. Date-time for which datasets to be retrieved.
     * @param {string} [valid_to] Valid to date time. Date-time for which datasets to be retrieved.
     * @param {string} [tdei_dataset_id] tdei_dataset_id of the dataset to be retrieved.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [other_published_locations] Other published locations
     * @param {number} [dataset_update_frequency_months] Dataset update frequency in months
     * @param {string} [schema_validation_run_description] Schema validation run description
     * @param {string} [full_dataset_name] Full dataset name
     * @param {string} [collection_name] Name of the collection
     * @param {string} [department_name] Name of the department
     * @param {string} [city] Name of the city
     * @param {string} [region] Name of the region
     * @param {string} [county] Name of the county
     * @param {string} [key_limitations] Key limitations of the dataset
     * @param {string} [release_notes] Release notes
     * @param {string} [challenges] Challenges faced in collecting the data
     * @param {Array<string>} [official_maintainer] Official maintainer of the dataset
     * @param {string} [last_updated] Date when the dataset was last updated
     * @param {string} [update_frequency] Frequency of updates
     * @param {string} [authorization_chain] Authorization chain
     * @param {boolean} [maintenance_funded] Is maintenance funded
     * @param {string} [funding_details] Funding details
     * @param {string} [point_data_collection_device] Point data collection device
     * @param {string} [node_locations_and_attributes_editing_software] Node locations and attributes editing software
     * @param {boolean} [data_collected_by_people] Is data collected by people
     * @param {string} [data_collectors] Data collectors
     * @param {boolean} [data_captured_automatically] Is data captured automatically
     * @param {string} [automated_collection] Automated collection
     * @param {string} [data_collectors_organization] Data collectors organization
     * @param {string} [data_collector_compensation] Data collector compensation
     * @param {string} [preprocessing_location] Preprocessing location
     * @param {string} [preprocessing_by] Preprocessing by
     * @param {string} [preprocessing_steps] Preprocessing steps
     * @param {boolean} [data_collection_preprocessing_documentation] Is data collection preprocessing documentation available
     * @param {string} [documentation_uri] Documentation URI
     * @param {boolean} [validation_process_exists] Is validation process exists
     * @param {string} [validation_process_description] Validation process description
     * @param {string} [validation_conducted_by] Validation conducted by
     * @param {string} [excluded_data] Excluded data
     * @param {string} [excluded_data_reason] Excluded data reason
     * @param {number} [page_no] Integer, defaults to 1. Retrieves the results in pages.
     * @param {number} [page_size] Page size. integer, between 1 to 50, defaults to 10.Specifies total records per page.
     * @param {string} [sort_field] Sort field. By default, it is by uploaded timestamp.
     * @param {string} [sort_order] Sort order. By default, it is in descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasetFiles: (data_type?: string, status?: string, name?: string, version?: string, data_source?: string, collection_method?: string, collected_by?: string, derived_from_dataset_id?: string, collection_date?: string, confidence_level?: number, schema_version?: string, tdei_project_group_id?: string, tdei_service_id?: string, valid_from?: string, valid_to?: string, tdei_dataset_id?: string, bbox?: Array<number>, other_published_locations?: string, dataset_update_frequency_months?: number, schema_validation_run_description?: string, full_dataset_name?: string, collection_name?: string, department_name?: string, city?: string, region?: string, county?: string, key_limitations?: string, release_notes?: string, challenges?: string, official_maintainer?: Array<string>, last_updated?: string, update_frequency?: string, authorization_chain?: string, maintenance_funded?: boolean, funding_details?: string, point_data_collection_device?: string, node_locations_and_attributes_editing_software?: string, data_collected_by_people?: boolean, data_collectors?: string, data_captured_automatically?: boolean, automated_collection?: string, data_collectors_organization?: string, data_collector_compensation?: string, preprocessing_location?: string, preprocessing_by?: string, preprocessing_steps?: string, data_collection_preprocessing_documentation?: boolean, documentation_uri?: string, validation_process_exists?: boolean, validation_process_description?: string, validation_conducted_by?: string, excluded_data?: string, excluded_data_reason?: string, page_no?: number, page_size?: number, sort_field?: string, sort_order?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of jobs including request and reponse details. By default only shows the jobs that are submitted by the user.
     * @summary Shows the details of the jobs that the user has access to.
     * @param {string} tdei_project_group_id project group id of the user for which the jobs are listed for.
     * @param {string} [job_id] Get the details for the job with id&#x3D;job_id only.
     * @param {boolean} [show_group_jobs] Make this &#x60;true&#x60; to see the jobs submitted by others also in the given project group
     * @param {string} [job_type] Use this to filter for a specific type of job
     * @param {string} [status] Status of the job. Use this to filter jobs by a specific status
     * @param {number} [page_no] Pagination: page number to start the list from. Defaults to 1.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJobs: (tdei_project_group_id: string, job_id?: string, show_group_jobs?: boolean, job_type?: string, status?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the list of project groups in the TDEI system. By default lists all the prohect groups in the TDEI system.
     * @summary List project groups
     * @param {string} [tdei_project_group_id] Get the details of the project group with id&#x3D;tdei_project_group_id only.
     * @param {string} [searchText] Search by project group name.
     * @param {number} [page_no] Pagination: page number to start the list from.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectGroups: (tdei_project_group_id?: string, searchText?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the list of services in the TDEI system. By default lists all the services in the TDEI system
     * @summary Lists the TDEI services
     * @param {string} [tdei_service_id] Get the details for the service with id&#x3D;job_id only.
     * @param {string} [searchText] Search by service name.
     * @param {string} [tdei_project_group_id] Gets the services belonging to a specific project group.&#x60;tdei_project_group_id&#x60; can be retrieved using the api &#x60;api/v1/project-groups&#x60;
     * @param {string} [service_type] Type of the service. Default list displays services with all types
     * @param {number} [page_no] Pagination: page number to start the list from.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServices: (tdei_service_id?: string, searchText?: string, tdei_project_group_id?: string, service_type?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CommonAPIsApi - functional programming interface
 * @export
 */
export declare const CommonAPIsApiFp: (configuration?: Configuration) => {
    /**
     * Cloning of a dataset lets one to use the dataset being cloned as the base for a new dataset without having to upload the dataset. This operation clones the datafiles in the dataset `tdei_dataset_id` to the designated project group `tdei_project_group_id` and service `tdei_service_id`, and uses the metadata file provided along with the API as the metadata. Returns cloned dataset id if the action is successful.
     * @summary Clones the provided dataset to the designated project group and service.
     * @param {Blob} file
     * @param {string} tdei_dataset_id Valid TDEI dataset id to be cloned.
     * @param {string} tdei_project_group_id Valid TDEI project group id.
     * @param {string} tdei_service_id Valid TDEI service id associated with the project group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneDatasetForm(file: Blob, tdei_dataset_id: string, tdei_project_group_id: string, tdei_service_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Deletes the dataset from TDEI system. This operation cannot be undone.
     * @summary Deletes the Dataset
     * @param {string} tdei_dataset_id Valid TDEI Dataset ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataset(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>>;
    /**
     * Updates the metadata of a dataset with the metadata in the provided file. Returns status 200 if the action is successful.
     * @summary Updates the metadata of a given dataset
     * @param {Blob} file
     * @param {string} tdei_dataset_id Must be a valid TDEI dataset id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMetadataForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     * Downloads the output file generated by the job
     * @summary Downloads the job output file
     * @param {string} job_id job_id uniquely represents the job request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobDownload(job_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     * Returns a list of supported versions of the TDEI API.
     * @summary List TDEI supported API versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<APIVersionList>>>;
    /**
     * This API lists all TDEI datasets, allowing users to efficiently search with sorting and filtering features. Each dataset entry is uniquely identified by `tdei_dataset_id` and also provide detailed information including metadata, associated project group, service details, download URL, and status. Users can sort datasets by 'valid_to', 'valid_from', 'uploaded date', 'project group name', and 'status'. Filtering options are provided for enhanced discoverability of the datasets.By default all released datasets are visible to all user. Pre-release datasets are only visible to user affiliated with the project groups.
     * @summary Lists the TDEI datasets in the system.
     * @param {string} [data_type] Type of the dataset.
     * @param {string} [status] This filter allows users to request datasets based on their status. When set to &#x27;All&#x27;, the filter displays all available datasets by default. If specified as &#x27;Pre-Release&#x27; or &#x27;Publish&#x27;, it shows only the datasets that are in the Pre-Release or Publish stages, respectively, for the project groups the user is affiliated with.
     * @param {string} [name] Dataset name or title
     * @param {string} [version] Dataset version.
     * @param {string} [data_source] Data source of the dataset.
     * @param {string} [collection_method] Method by which the data was collected.
     * @param {string} [collected_by] Collection agency or person.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {string} [collection_date] Collection date time
     * @param {number} [confidence_level] Minimum confidence level required. Data returned will be at this confidence level or higher. Confidence level range is: 0 (very low confidence) to 100 (very high confidence).
     * @param {string} [schema_version] Version name of the data type schema version that the application requests. list of versions can be found with /api/v1/{data_type}/versions.
     * @param {string} [tdei_project_group_id] TDEI project group id of the datasets to be retrieved.
     * @param {string} [tdei_service_id] TDEI service id of the datasets to be retrieved.
     * @param {string} [valid_from] Valid from date time. Date-time for which datasets to be retrieved.
     * @param {string} [valid_to] Valid to date time. Date-time for which datasets to be retrieved.
     * @param {string} [tdei_dataset_id] tdei_dataset_id of the dataset to be retrieved.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [other_published_locations] Other published locations
     * @param {number} [dataset_update_frequency_months] Dataset update frequency in months
     * @param {string} [schema_validation_run_description] Schema validation run description
     * @param {string} [full_dataset_name] Full dataset name
     * @param {string} [collection_name] Name of the collection
     * @param {string} [department_name] Name of the department
     * @param {string} [city] Name of the city
     * @param {string} [region] Name of the region
     * @param {string} [county] Name of the county
     * @param {string} [key_limitations] Key limitations of the dataset
     * @param {string} [release_notes] Release notes
     * @param {string} [challenges] Challenges faced in collecting the data
     * @param {Array<string>} [official_maintainer] Official maintainer of the dataset
     * @param {string} [last_updated] Date when the dataset was last updated
     * @param {string} [update_frequency] Frequency of updates
     * @param {string} [authorization_chain] Authorization chain
     * @param {boolean} [maintenance_funded] Is maintenance funded
     * @param {string} [funding_details] Funding details
     * @param {string} [point_data_collection_device] Point data collection device
     * @param {string} [node_locations_and_attributes_editing_software] Node locations and attributes editing software
     * @param {boolean} [data_collected_by_people] Is data collected by people
     * @param {string} [data_collectors] Data collectors
     * @param {boolean} [data_captured_automatically] Is data captured automatically
     * @param {string} [automated_collection] Automated collection
     * @param {string} [data_collectors_organization] Data collectors organization
     * @param {string} [data_collector_compensation] Data collector compensation
     * @param {string} [preprocessing_location] Preprocessing location
     * @param {string} [preprocessing_by] Preprocessing by
     * @param {string} [preprocessing_steps] Preprocessing steps
     * @param {boolean} [data_collection_preprocessing_documentation] Is data collection preprocessing documentation available
     * @param {string} [documentation_uri] Documentation URI
     * @param {boolean} [validation_process_exists] Is validation process exists
     * @param {string} [validation_process_description] Validation process description
     * @param {string} [validation_conducted_by] Validation conducted by
     * @param {string} [excluded_data] Excluded data
     * @param {string} [excluded_data_reason] Excluded data reason
     * @param {number} [page_no] Integer, defaults to 1. Retrieves the results in pages.
     * @param {number} [page_size] Page size. integer, between 1 to 50, defaults to 10.Specifies total records per page.
     * @param {string} [sort_field] Sort field. By default, it is by uploaded timestamp.
     * @param {string} [sort_order] Sort order. By default, it is in descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasetFiles(data_type?: string, status?: string, name?: string, version?: string, data_source?: string, collection_method?: string, collected_by?: string, derived_from_dataset_id?: string, collection_date?: string, confidence_level?: number, schema_version?: string, tdei_project_group_id?: string, tdei_service_id?: string, valid_from?: string, valid_to?: string, tdei_dataset_id?: string, bbox?: Array<number>, other_published_locations?: string, dataset_update_frequency_months?: number, schema_validation_run_description?: string, full_dataset_name?: string, collection_name?: string, department_name?: string, city?: string, region?: string, county?: string, key_limitations?: string, release_notes?: string, challenges?: string, official_maintainer?: Array<string>, last_updated?: string, update_frequency?: string, authorization_chain?: string, maintenance_funded?: boolean, funding_details?: string, point_data_collection_device?: string, node_locations_and_attributes_editing_software?: string, data_collected_by_people?: boolean, data_collectors?: string, data_captured_automatically?: boolean, automated_collection?: string, data_collectors_organization?: string, data_collector_compensation?: string, preprocessing_location?: string, preprocessing_by?: string, preprocessing_steps?: string, data_collection_preprocessing_documentation?: boolean, documentation_uri?: string, validation_process_exists?: boolean, validation_process_description?: string, validation_conducted_by?: string, excluded_data?: string, excluded_data_reason?: string, page_no?: number, page_size?: number, sort_field?: string, sort_order?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DatasetItem>>>>;
    /**
     * Returns a list of jobs including request and reponse details. By default only shows the jobs that are submitted by the user.
     * @summary Shows the details of the jobs that the user has access to.
     * @param {string} tdei_project_group_id project group id of the user for which the jobs are listed for.
     * @param {string} [job_id] Get the details for the job with id&#x3D;job_id only.
     * @param {boolean} [show_group_jobs] Make this &#x60;true&#x60; to see the jobs submitted by others also in the given project group
     * @param {string} [job_type] Use this to filter for a specific type of job
     * @param {string} [status] Status of the job. Use this to filter jobs by a specific status
     * @param {number} [page_no] Pagination: page number to start the list from. Defaults to 1.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJobs(tdei_project_group_id: string, job_id?: string, show_group_jobs?: boolean, job_type?: string, status?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<JobDetails>>>>;
    /**
     * Retrieves the list of project groups in the TDEI system. By default lists all the prohect groups in the TDEI system.
     * @summary List project groups
     * @param {string} [tdei_project_group_id] Get the details of the project group with id&#x3D;tdei_project_group_id only.
     * @param {string} [searchText] Search by project group name.
     * @param {number} [page_no] Pagination: page number to start the list from.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectGroups(tdei_project_group_id?: string, searchText?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ProjectGroup>>>>;
    /**
     * Retrieves the list of services in the TDEI system. By default lists all the services in the TDEI system
     * @summary Lists the TDEI services
     * @param {string} [tdei_service_id] Get the details for the service with id&#x3D;job_id only.
     * @param {string} [searchText] Search by service name.
     * @param {string} [tdei_project_group_id] Gets the services belonging to a specific project group.&#x60;tdei_project_group_id&#x60; can be retrieved using the api &#x60;api/v1/project-groups&#x60;
     * @param {string} [service_type] Type of the service. Default list displays services with all types
     * @param {number} [page_no] Pagination: page number to start the list from.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServices(tdei_service_id?: string, searchText?: string, tdei_project_group_id?: string, service_type?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ServiceModel>>>>;
};
/**
 * CommonAPIsApi - factory interface
 * @export
 */
export declare const CommonAPIsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cloning of a dataset lets one to use the dataset being cloned as the base for a new dataset without having to upload the dataset. This operation clones the datafiles in the dataset `tdei_dataset_id` to the designated project group `tdei_project_group_id` and service `tdei_service_id`, and uses the metadata file provided along with the API as the metadata. Returns cloned dataset id if the action is successful.
     * @summary Clones the provided dataset to the designated project group and service.
     * @param {Blob} file
     * @param {string} tdei_dataset_id Valid TDEI dataset id to be cloned.
     * @param {string} tdei_project_group_id Valid TDEI project group id.
     * @param {string} tdei_service_id Valid TDEI service id associated with the project group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneDatasetForm(file: Blob, tdei_dataset_id: string, tdei_project_group_id: string, tdei_service_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Deletes the dataset from TDEI system. This operation cannot be undone.
     * @summary Deletes the Dataset
     * @param {string} tdei_dataset_id Valid TDEI Dataset ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDataset(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>>;
    /**
     * Updates the metadata of a dataset with the metadata in the provided file. Returns status 200 if the action is successful.
     * @summary Updates the metadata of a given dataset
     * @param {Blob} file
     * @param {string} tdei_dataset_id Must be a valid TDEI dataset id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMetadataForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Downloads the output file generated by the job
     * @summary Downloads the job output file
     * @param {string} job_id job_id uniquely represents the job request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobDownload(job_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Returns a list of supported versions of the TDEI API.
     * @summary List TDEI supported API versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<APIVersionList>>;
    /**
     * This API lists all TDEI datasets, allowing users to efficiently search with sorting and filtering features. Each dataset entry is uniquely identified by `tdei_dataset_id` and also provide detailed information including metadata, associated project group, service details, download URL, and status. Users can sort datasets by 'valid_to', 'valid_from', 'uploaded date', 'project group name', and 'status'. Filtering options are provided for enhanced discoverability of the datasets.By default all released datasets are visible to all user. Pre-release datasets are only visible to user affiliated with the project groups.
     * @summary Lists the TDEI datasets in the system.
     * @param {string} [data_type] Type of the dataset.
     * @param {string} [status] This filter allows users to request datasets based on their status. When set to &#x27;All&#x27;, the filter displays all available datasets by default. If specified as &#x27;Pre-Release&#x27; or &#x27;Publish&#x27;, it shows only the datasets that are in the Pre-Release or Publish stages, respectively, for the project groups the user is affiliated with.
     * @param {string} [name] Dataset name or title
     * @param {string} [version] Dataset version.
     * @param {string} [data_source] Data source of the dataset.
     * @param {string} [collection_method] Method by which the data was collected.
     * @param {string} [collected_by] Collection agency or person.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {string} [collection_date] Collection date time
     * @param {number} [confidence_level] Minimum confidence level required. Data returned will be at this confidence level or higher. Confidence level range is: 0 (very low confidence) to 100 (very high confidence).
     * @param {string} [schema_version] Version name of the data type schema version that the application requests. list of versions can be found with /api/v1/{data_type}/versions.
     * @param {string} [tdei_project_group_id] TDEI project group id of the datasets to be retrieved.
     * @param {string} [tdei_service_id] TDEI service id of the datasets to be retrieved.
     * @param {string} [valid_from] Valid from date time. Date-time for which datasets to be retrieved.
     * @param {string} [valid_to] Valid to date time. Date-time for which datasets to be retrieved.
     * @param {string} [tdei_dataset_id] tdei_dataset_id of the dataset to be retrieved.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [other_published_locations] Other published locations
     * @param {number} [dataset_update_frequency_months] Dataset update frequency in months
     * @param {string} [schema_validation_run_description] Schema validation run description
     * @param {string} [full_dataset_name] Full dataset name
     * @param {string} [collection_name] Name of the collection
     * @param {string} [department_name] Name of the department
     * @param {string} [city] Name of the city
     * @param {string} [region] Name of the region
     * @param {string} [county] Name of the county
     * @param {string} [key_limitations] Key limitations of the dataset
     * @param {string} [release_notes] Release notes
     * @param {string} [challenges] Challenges faced in collecting the data
     * @param {Array<string>} [official_maintainer] Official maintainer of the dataset
     * @param {string} [last_updated] Date when the dataset was last updated
     * @param {string} [update_frequency] Frequency of updates
     * @param {string} [authorization_chain] Authorization chain
     * @param {boolean} [maintenance_funded] Is maintenance funded
     * @param {string} [funding_details] Funding details
     * @param {string} [point_data_collection_device] Point data collection device
     * @param {string} [node_locations_and_attributes_editing_software] Node locations and attributes editing software
     * @param {boolean} [data_collected_by_people] Is data collected by people
     * @param {string} [data_collectors] Data collectors
     * @param {boolean} [data_captured_automatically] Is data captured automatically
     * @param {string} [automated_collection] Automated collection
     * @param {string} [data_collectors_organization] Data collectors organization
     * @param {string} [data_collector_compensation] Data collector compensation
     * @param {string} [preprocessing_location] Preprocessing location
     * @param {string} [preprocessing_by] Preprocessing by
     * @param {string} [preprocessing_steps] Preprocessing steps
     * @param {boolean} [data_collection_preprocessing_documentation] Is data collection preprocessing documentation available
     * @param {string} [documentation_uri] Documentation URI
     * @param {boolean} [validation_process_exists] Is validation process exists
     * @param {string} [validation_process_description] Validation process description
     * @param {string} [validation_conducted_by] Validation conducted by
     * @param {string} [excluded_data] Excluded data
     * @param {string} [excluded_data_reason] Excluded data reason
     * @param {number} [page_no] Integer, defaults to 1. Retrieves the results in pages.
     * @param {number} [page_size] Page size. integer, between 1 to 50, defaults to 10.Specifies total records per page.
     * @param {string} [sort_field] Sort field. By default, it is by uploaded timestamp.
     * @param {string} [sort_order] Sort order. By default, it is in descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatasetFiles(data_type?: string, status?: string, name?: string, version?: string, data_source?: string, collection_method?: string, collected_by?: string, derived_from_dataset_id?: string, collection_date?: string, confidence_level?: number, schema_version?: string, tdei_project_group_id?: string, tdei_service_id?: string, valid_from?: string, valid_to?: string, tdei_dataset_id?: string, bbox?: Array<number>, other_published_locations?: string, dataset_update_frequency_months?: number, schema_validation_run_description?: string, full_dataset_name?: string, collection_name?: string, department_name?: string, city?: string, region?: string, county?: string, key_limitations?: string, release_notes?: string, challenges?: string, official_maintainer?: Array<string>, last_updated?: string, update_frequency?: string, authorization_chain?: string, maintenance_funded?: boolean, funding_details?: string, point_data_collection_device?: string, node_locations_and_attributes_editing_software?: string, data_collected_by_people?: boolean, data_collectors?: string, data_captured_automatically?: boolean, automated_collection?: string, data_collectors_organization?: string, data_collector_compensation?: string, preprocessing_location?: string, preprocessing_by?: string, preprocessing_steps?: string, data_collection_preprocessing_documentation?: boolean, documentation_uri?: string, validation_process_exists?: boolean, validation_process_description?: string, validation_conducted_by?: string, excluded_data?: string, excluded_data_reason?: string, page_no?: number, page_size?: number, sort_field?: string, sort_order?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DatasetItem>>>;
    /**
     * Returns a list of jobs including request and reponse details. By default only shows the jobs that are submitted by the user.
     * @summary Shows the details of the jobs that the user has access to.
     * @param {string} tdei_project_group_id project group id of the user for which the jobs are listed for.
     * @param {string} [job_id] Get the details for the job with id&#x3D;job_id only.
     * @param {boolean} [show_group_jobs] Make this &#x60;true&#x60; to see the jobs submitted by others also in the given project group
     * @param {string} [job_type] Use this to filter for a specific type of job
     * @param {string} [status] Status of the job. Use this to filter jobs by a specific status
     * @param {number} [page_no] Pagination: page number to start the list from. Defaults to 1.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJobs(tdei_project_group_id: string, job_id?: string, show_group_jobs?: boolean, job_type?: string, status?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<JobDetails>>>;
    /**
     * Retrieves the list of project groups in the TDEI system. By default lists all the prohect groups in the TDEI system.
     * @summary List project groups
     * @param {string} [tdei_project_group_id] Get the details of the project group with id&#x3D;tdei_project_group_id only.
     * @param {string} [searchText] Search by project group name.
     * @param {number} [page_no] Pagination: page number to start the list from.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectGroups(tdei_project_group_id?: string, searchText?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProjectGroup>>>;
    /**
     * Retrieves the list of services in the TDEI system. By default lists all the services in the TDEI system
     * @summary Lists the TDEI services
     * @param {string} [tdei_service_id] Get the details for the service with id&#x3D;job_id only.
     * @param {string} [searchText] Search by service name.
     * @param {string} [tdei_project_group_id] Gets the services belonging to a specific project group.&#x60;tdei_project_group_id&#x60; can be retrieved using the api &#x60;api/v1/project-groups&#x60;
     * @param {string} [service_type] Type of the service. Default list displays services with all types
     * @param {number} [page_no] Pagination: page number to start the list from.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServices(tdei_service_id?: string, searchText?: string, tdei_project_group_id?: string, service_type?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ServiceModel>>>;
};
/**
 * CommonAPIsApi - object-oriented interface
 * @export
 * @class CommonAPIsApi
 * @extends {BaseAPI}
 */
export declare class CommonAPIsApi extends BaseAPI {
    /**
     * Cloning of a dataset lets one to use the dataset being cloned as the base for a new dataset without having to upload the dataset. This operation clones the datafiles in the dataset `tdei_dataset_id` to the designated project group `tdei_project_group_id` and service `tdei_service_id`, and uses the metadata file provided along with the API as the metadata. Returns cloned dataset id if the action is successful.
     * @summary Clones the provided dataset to the designated project group and service.
     * @param {Blob} file
     * @param {string} tdei_dataset_id Valid TDEI dataset id to be cloned.
     * @param {string} tdei_project_group_id Valid TDEI project group id.
     * @param {string} tdei_service_id Valid TDEI service id associated with the project group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    cloneDatasetForm(file: Blob, tdei_dataset_id: string, tdei_project_group_id: string, tdei_service_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Deletes the dataset from TDEI system. This operation cannot be undone.
     * @summary Deletes the Dataset
     * @param {string} tdei_dataset_id Valid TDEI Dataset ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    deleteDataset(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>>;
    /**
     * Updates the metadata of a dataset with the metadata in the provided file. Returns status 200 if the action is successful.
     * @summary Updates the metadata of a given dataset
     * @param {Blob} file
     * @param {string} tdei_dataset_id Must be a valid TDEI dataset id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    editMetadataForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Downloads the output file generated by the job
     * @summary Downloads the job output file
     * @param {string} job_id job_id uniquely represents the job request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    jobDownload(job_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Returns a list of supported versions of the TDEI API.
     * @summary List TDEI supported API versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    listApiVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<APIVersionList>>;
    /**
     * This API lists all TDEI datasets, allowing users to efficiently search with sorting and filtering features. Each dataset entry is uniquely identified by `tdei_dataset_id` and also provide detailed information including metadata, associated project group, service details, download URL, and status. Users can sort datasets by 'valid_to', 'valid_from', 'uploaded date', 'project group name', and 'status'. Filtering options are provided for enhanced discoverability of the datasets.By default all released datasets are visible to all user. Pre-release datasets are only visible to user affiliated with the project groups.
     * @summary Lists the TDEI datasets in the system.
     * @param {string} [data_type] Type of the dataset.
     * @param {string} [status] This filter allows users to request datasets based on their status. When set to &#x27;All&#x27;, the filter displays all available datasets by default. If specified as &#x27;Pre-Release&#x27; or &#x27;Publish&#x27;, it shows only the datasets that are in the Pre-Release or Publish stages, respectively, for the project groups the user is affiliated with.
     * @param {string} [name] Dataset name or title
     * @param {string} [version] Dataset version.
     * @param {string} [data_source] Data source of the dataset.
     * @param {string} [collection_method] Method by which the data was collected.
     * @param {string} [collected_by] Collection agency or person.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {string} [collection_date] Collection date time
     * @param {number} [confidence_level] Minimum confidence level required. Data returned will be at this confidence level or higher. Confidence level range is: 0 (very low confidence) to 100 (very high confidence).
     * @param {string} [schema_version] Version name of the data type schema version that the application requests. list of versions can be found with /api/v1/{data_type}/versions.
     * @param {string} [tdei_project_group_id] TDEI project group id of the datasets to be retrieved.
     * @param {string} [tdei_service_id] TDEI service id of the datasets to be retrieved.
     * @param {string} [valid_from] Valid from date time. Date-time for which datasets to be retrieved.
     * @param {string} [valid_to] Valid to date time. Date-time for which datasets to be retrieved.
     * @param {string} [tdei_dataset_id] tdei_dataset_id of the dataset to be retrieved.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [other_published_locations] Other published locations
     * @param {number} [dataset_update_frequency_months] Dataset update frequency in months
     * @param {string} [schema_validation_run_description] Schema validation run description
     * @param {string} [full_dataset_name] Full dataset name
     * @param {string} [collection_name] Name of the collection
     * @param {string} [department_name] Name of the department
     * @param {string} [city] Name of the city
     * @param {string} [region] Name of the region
     * @param {string} [county] Name of the county
     * @param {string} [key_limitations] Key limitations of the dataset
     * @param {string} [release_notes] Release notes
     * @param {string} [challenges] Challenges faced in collecting the data
     * @param {Array<string>} [official_maintainer] Official maintainer of the dataset
     * @param {string} [last_updated] Date when the dataset was last updated
     * @param {string} [update_frequency] Frequency of updates
     * @param {string} [authorization_chain] Authorization chain
     * @param {boolean} [maintenance_funded] Is maintenance funded
     * @param {string} [funding_details] Funding details
     * @param {string} [point_data_collection_device] Point data collection device
     * @param {string} [node_locations_and_attributes_editing_software] Node locations and attributes editing software
     * @param {boolean} [data_collected_by_people] Is data collected by people
     * @param {string} [data_collectors] Data collectors
     * @param {boolean} [data_captured_automatically] Is data captured automatically
     * @param {string} [automated_collection] Automated collection
     * @param {string} [data_collectors_organization] Data collectors organization
     * @param {string} [data_collector_compensation] Data collector compensation
     * @param {string} [preprocessing_location] Preprocessing location
     * @param {string} [preprocessing_by] Preprocessing by
     * @param {string} [preprocessing_steps] Preprocessing steps
     * @param {boolean} [data_collection_preprocessing_documentation] Is data collection preprocessing documentation available
     * @param {string} [documentation_uri] Documentation URI
     * @param {boolean} [validation_process_exists] Is validation process exists
     * @param {string} [validation_process_description] Validation process description
     * @param {string} [validation_conducted_by] Validation conducted by
     * @param {string} [excluded_data] Excluded data
     * @param {string} [excluded_data_reason] Excluded data reason
     * @param {number} [page_no] Integer, defaults to 1. Retrieves the results in pages.
     * @param {number} [page_size] Page size. integer, between 1 to 50, defaults to 10.Specifies total records per page.
     * @param {string} [sort_field] Sort field. By default, it is by uploaded timestamp.
     * @param {string} [sort_order] Sort order. By default, it is in descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    listDatasetFiles(data_type?: string, status?: string, name?: string, version?: string, data_source?: string, collection_method?: string, collected_by?: string, derived_from_dataset_id?: string, collection_date?: string, confidence_level?: number, schema_version?: string, tdei_project_group_id?: string, tdei_service_id?: string, valid_from?: string, valid_to?: string, tdei_dataset_id?: string, bbox?: Array<number>, other_published_locations?: string, dataset_update_frequency_months?: number, schema_validation_run_description?: string, full_dataset_name?: string, collection_name?: string, department_name?: string, city?: string, region?: string, county?: string, key_limitations?: string, release_notes?: string, challenges?: string, official_maintainer?: Array<string>, last_updated?: string, update_frequency?: string, authorization_chain?: string, maintenance_funded?: boolean, funding_details?: string, point_data_collection_device?: string, node_locations_and_attributes_editing_software?: string, data_collected_by_people?: boolean, data_collectors?: string, data_captured_automatically?: boolean, automated_collection?: string, data_collectors_organization?: string, data_collector_compensation?: string, preprocessing_location?: string, preprocessing_by?: string, preprocessing_steps?: string, data_collection_preprocessing_documentation?: boolean, documentation_uri?: string, validation_process_exists?: boolean, validation_process_description?: string, validation_conducted_by?: string, excluded_data?: string, excluded_data_reason?: string, page_no?: number, page_size?: number, sort_field?: string, sort_order?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DatasetItem>>>;
    /**
     * Returns a list of jobs including request and reponse details. By default only shows the jobs that are submitted by the user.
     * @summary Shows the details of the jobs that the user has access to.
     * @param {string} tdei_project_group_id project group id of the user for which the jobs are listed for.
     * @param {string} [job_id] Get the details for the job with id&#x3D;job_id only.
     * @param {boolean} [show_group_jobs] Make this &#x60;true&#x60; to see the jobs submitted by others also in the given project group
     * @param {string} [job_type] Use this to filter for a specific type of job
     * @param {string} [status] Status of the job. Use this to filter jobs by a specific status
     * @param {number} [page_no] Pagination: page number to start the list from. Defaults to 1.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    listJobs(tdei_project_group_id: string, job_id?: string, show_group_jobs?: boolean, job_type?: string, status?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<JobDetails>>>;
    /**
     * Retrieves the list of project groups in the TDEI system. By default lists all the prohect groups in the TDEI system.
     * @summary List project groups
     * @param {string} [tdei_project_group_id] Get the details of the project group with id&#x3D;tdei_project_group_id only.
     * @param {string} [searchText] Search by project group name.
     * @param {number} [page_no] Pagination: page number to start the list from.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    listProjectGroups(tdei_project_group_id?: string, searchText?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProjectGroup>>>;
    /**
     * Retrieves the list of services in the TDEI system. By default lists all the services in the TDEI system
     * @summary Lists the TDEI services
     * @param {string} [tdei_service_id] Get the details for the service with id&#x3D;job_id only.
     * @param {string} [searchText] Search by service name.
     * @param {string} [tdei_project_group_id] Gets the services belonging to a specific project group.&#x60;tdei_project_group_id&#x60; can be retrieved using the api &#x60;api/v1/project-groups&#x60;
     * @param {string} [service_type] Type of the service. Default list displays services with all types
     * @param {number} [page_no] Pagination: page number to start the list from.
     * @param {number} [page_size] Total records to retrieve.Page size ranges between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonAPIsApi
     */
    listServices(tdei_service_id?: string, searchText?: string, tdei_project_group_id?: string, service_type?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ServiceModel>>>;
}
