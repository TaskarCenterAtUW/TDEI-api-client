"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralApi = exports.GeneralApiFactory = exports.GeneralApiFp = exports.GeneralApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) data system. It is intended for applications producing data to and consuming data from the TDEI system. It currently supports GTFS-Pathways, GTFS-Flex v2 and OpenSidewalks v0.2 data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: tdei@uw.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * GeneralApi - axios parameter creator
 * @export
 */
var GeneralApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns boolean true if the action is successful.
         * @summary Invalidates the Dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataset: function (tdei_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling deleteDataset.');
                            }
                            localVarPath = "/api/v1/dataset/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Downloads the dataset generated by the job
         * @summary Downloads the job download file
         * @param {string} job_id job_id uniquely represents the job request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobDownload: function (job_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'job_id' is not null or undefined
                            if (job_id === null || job_id === undefined) {
                                throw new base_1.RequiredError('job_id', 'Required parameter job_id was null or undefined when calling jobDownload.');
                            }
                            localVarPath = "/api/v1/job/download/{job_id}"
                                .replace("{".concat("job_id", "}"), encodeURIComponent(String(job_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns a json list of the versions of the TDEI API which are available.
         * @summary List available API versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiVersions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/api";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns a list of url to zipped geojson files with Dataset data that meet the specified criteria. Criteria that can be specified include: a dataset area (polygon), minimum confidence level and Dataset version.
         * @summary List Dataset files meeting criteria.
         * @param {string} [data_type] Data type of the dataset.
         * @param {string} [status] Request datasets according to their status. By default, when the setting is &#x27;All&#x27;, it displays all datasets. If set to &#x27;Pre-Release&#x27; or &#x27;Publish&#x27;, it includes Pre-Release or Publish datasets for the project groups the user is a part of.
         * @param {string} [name] dataset name or title.
         * @param {string} [version] dataset version.
         * @param {string} [data_source] data source of the dataset.
         * @param {string} [collection_method] Method by which the data was collected.
         * @param {string} [collected_by] Collection agency or person.
         * @param {string} [derived_from_dataset_id] Derived from dataset id.
         * @param {string} [collection_date] Collection date time
         * @param {number} [confidence_level] Minimum confidence level required. Data returned will be at this confidence level or higher. Confidence level range is: 0 (very low confidence) to 100 (very high confidence).
         * @param {string} [schema_version] version name of the data type schema version that the application requests. list of versions can be found with /api/v1/{data_type}/versions.
         * @param {string} [tdei_project_group_id] tdei-assigned project group id. Represented as a UUID.
         * @param {string} [valid_from] Valid from date time. date-time for which the caller is interested in obtaining files.
         * @param {string} [valid_to] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_dataset_id] tdei_dataset_id, unique id represents file.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFiles: function (data_type, status, name, version, data_source, collection_method, collected_by, derived_from_dataset_id, collection_date, confidence_level, schema_version, tdei_project_group_id, valid_from, valid_to, tdei_dataset_id, bbox, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/datasets";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (data_type !== undefined) {
                                localVarQueryParameter['data_type'] = data_type;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (version !== undefined) {
                                localVarQueryParameter['version'] = version;
                            }
                            if (data_source !== undefined) {
                                localVarQueryParameter['data_source'] = data_source;
                            }
                            if (collection_method !== undefined) {
                                localVarQueryParameter['collection_method'] = collection_method;
                            }
                            if (collected_by !== undefined) {
                                localVarQueryParameter['collected_by'] = collected_by;
                            }
                            if (derived_from_dataset_id !== undefined) {
                                localVarQueryParameter['derived_from_dataset_id'] = derived_from_dataset_id;
                            }
                            if (collection_date !== undefined) {
                                localVarQueryParameter['collection_date'] = collection_date;
                            }
                            if (confidence_level !== undefined) {
                                localVarQueryParameter['confidence_level'] = confidence_level;
                            }
                            if (schema_version !== undefined) {
                                localVarQueryParameter['schema_version'] = schema_version;
                            }
                            if (tdei_project_group_id !== undefined) {
                                localVarQueryParameter['tdei_project_group_id'] = tdei_project_group_id;
                            }
                            if (valid_from !== undefined) {
                                localVarQueryParameter['valid_from'] = valid_from;
                            }
                            if (valid_to !== undefined) {
                                localVarQueryParameter['valid_to'] = valid_to;
                            }
                            if (tdei_dataset_id !== undefined) {
                                localVarQueryParameter['tdei_dataset_id'] = tdei_dataset_id;
                            }
                            if (bbox) {
                                localVarQueryParameter['bbox'] = bbox;
                            }
                            if (page_no !== undefined) {
                                localVarQueryParameter['page_no'] = page_no;
                            }
                            if (page_size !== undefined) {
                                localVarQueryParameter['page_size'] = page_size;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns a list of jobs with status and request details.
         * @summary List job details.
         * @param {string} [job_id] job_id uniquely identifies the job request.
         * @param {string} [job_type] job_type of the job.
         * @param {string} [status] Status of the job.
         * @param {string} [tdei_project_group_id] project group id. Represented as a UUID.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs: function (job_id, job_type, status, tdei_project_group_id, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/jobs";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (job_id !== undefined) {
                                localVarQueryParameter['job_id'] = job_id;
                            }
                            if (job_type !== undefined) {
                                localVarQueryParameter['job_type'] = job_type;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (tdei_project_group_id !== undefined) {
                                localVarQueryParameter['tdei_project_group_id'] = tdei_project_group_id;
                            }
                            if (page_no !== undefined) {
                                localVarQueryParameter['page_no'] = page_no;
                            }
                            if (page_size !== undefined) {
                                localVarQueryParameter['page_size'] = page_size;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Path used to retrieve the list of project groups with data in the TDEI system. Allows callers to get the tdei_project_group_id id for an project group.  Returns the tdei_project_group_id and project group information for all project groups with data in the TDEI system.
         * @summary List project groups
         * @param {string} [tdei_project_group_id] Search by project group Id.
         * @param {string} [searchText] Search by project group name.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectGroups: function (tdei_project_group_id, searchText, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/project-groups";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (tdei_project_group_id !== undefined) {
                                localVarQueryParameter['tdei_project_group_id'] = tdei_project_group_id;
                            }
                            if (searchText !== undefined) {
                                localVarQueryParameter['searchText'] = searchText;
                            }
                            if (page_no !== undefined) {
                                localVarQueryParameter['page_no'] = page_no;
                            }
                            if (page_size !== undefined) {
                                localVarQueryParameter['page_size'] = page_size;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Path used to retrieve the list of Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_project_group_id param is used, will return services for that project group.
         * @summary List Services
         * @param {string} [tdei_service_id] Search by service Id.
         * @param {string} [searchText] Search by service name.
         * @param {string} [tdei_project_group_id] A tdei-assigned id for an project group. project_group_ids can be retrieved using the path /api/v1/project-group.
         * @param {string} [service_type] Service type
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServices: function (tdei_service_id, searchText, tdei_project_group_id, service_type, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/services";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (tdei_service_id !== undefined) {
                                localVarQueryParameter['tdei_service_id'] = tdei_service_id;
                            }
                            if (searchText !== undefined) {
                                localVarQueryParameter['searchText'] = searchText;
                            }
                            if (tdei_project_group_id !== undefined) {
                                localVarQueryParameter['tdei_project_group_id'] = tdei_project_group_id;
                            }
                            if (service_type !== undefined) {
                                localVarQueryParameter['service_type'] = service_type;
                            }
                            if (page_no !== undefined) {
                                localVarQueryParameter['page_no'] = page_no;
                            }
                            if (page_size !== undefined) {
                                localVarQueryParameter['page_size'] = page_size;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.GeneralApiAxiosParamCreator = GeneralApiAxiosParamCreator;
/**
 * GeneralApi - functional programming interface
 * @export
 */
var GeneralApiFp = function (configuration) {
    return {
        /**
         * Returns boolean true if the action is successful.
         * @summary Invalidates the Dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataset: function (tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GeneralApiAxiosParamCreator)(configuration).deleteDataset(tdei_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Downloads the dataset generated by the job
         * @summary Downloads the job download file
         * @param {string} job_id job_id uniquely represents the job request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobDownload: function (job_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GeneralApiAxiosParamCreator)(configuration).jobDownload(job_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns a json list of the versions of the TDEI API which are available.
         * @summary List available API versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiVersions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GeneralApiAxiosParamCreator)(configuration).listApiVersions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns a list of url to zipped geojson files with Dataset data that meet the specified criteria. Criteria that can be specified include: a dataset area (polygon), minimum confidence level and Dataset version.
         * @summary List Dataset files meeting criteria.
         * @param {string} [data_type] Data type of the dataset.
         * @param {string} [status] Request datasets according to their status. By default, when the setting is &#x27;All&#x27;, it displays all datasets. If set to &#x27;Pre-Release&#x27; or &#x27;Publish&#x27;, it includes Pre-Release or Publish datasets for the project groups the user is a part of.
         * @param {string} [name] dataset name or title.
         * @param {string} [version] dataset version.
         * @param {string} [data_source] data source of the dataset.
         * @param {string} [collection_method] Method by which the data was collected.
         * @param {string} [collected_by] Collection agency or person.
         * @param {string} [derived_from_dataset_id] Derived from dataset id.
         * @param {string} [collection_date] Collection date time
         * @param {number} [confidence_level] Minimum confidence level required. Data returned will be at this confidence level or higher. Confidence level range is: 0 (very low confidence) to 100 (very high confidence).
         * @param {string} [schema_version] version name of the data type schema version that the application requests. list of versions can be found with /api/v1/{data_type}/versions.
         * @param {string} [tdei_project_group_id] tdei-assigned project group id. Represented as a UUID.
         * @param {string} [valid_from] Valid from date time. date-time for which the caller is interested in obtaining files.
         * @param {string} [valid_to] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_dataset_id] tdei_dataset_id, unique id represents file.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFiles: function (data_type, status, name, version, data_source, collection_method, collected_by, derived_from_dataset_id, collection_date, confidence_level, schema_version, tdei_project_group_id, valid_from, valid_to, tdei_dataset_id, bbox, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GeneralApiAxiosParamCreator)(configuration).listDatasetFiles(data_type, status, name, version, data_source, collection_method, collected_by, derived_from_dataset_id, collection_date, confidence_level, schema_version, tdei_project_group_id, valid_from, valid_to, tdei_dataset_id, bbox, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns a list of jobs with status and request details.
         * @summary List job details.
         * @param {string} [job_id] job_id uniquely identifies the job request.
         * @param {string} [job_type] job_type of the job.
         * @param {string} [status] Status of the job.
         * @param {string} [tdei_project_group_id] project group id. Represented as a UUID.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs: function (job_id, job_type, status, tdei_project_group_id, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GeneralApiAxiosParamCreator)(configuration).listJobs(job_id, job_type, status, tdei_project_group_id, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Path used to retrieve the list of project groups with data in the TDEI system. Allows callers to get the tdei_project_group_id id for an project group.  Returns the tdei_project_group_id and project group information for all project groups with data in the TDEI system.
         * @summary List project groups
         * @param {string} [tdei_project_group_id] Search by project group Id.
         * @param {string} [searchText] Search by project group name.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectGroups: function (tdei_project_group_id, searchText, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GeneralApiAxiosParamCreator)(configuration).listProjectGroups(tdei_project_group_id, searchText, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Path used to retrieve the list of Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_project_group_id param is used, will return services for that project group.
         * @summary List Services
         * @param {string} [tdei_service_id] Search by service Id.
         * @param {string} [searchText] Search by service name.
         * @param {string} [tdei_project_group_id] A tdei-assigned id for an project group. project_group_ids can be retrieved using the path /api/v1/project-group.
         * @param {string} [service_type] Service type
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServices: function (tdei_service_id, searchText, tdei_project_group_id, service_type, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GeneralApiAxiosParamCreator)(configuration).listServices(tdei_service_id, searchText, tdei_project_group_id, service_type, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.GeneralApiFp = GeneralApiFp;
/**
 * GeneralApi - factory interface
 * @export
 */
var GeneralApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns boolean true if the action is successful.
         * @summary Invalidates the Dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataset: function (tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.GeneralApiFp)(configuration).deleteDataset(tdei_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Downloads the dataset generated by the job
         * @summary Downloads the job download file
         * @param {string} job_id job_id uniquely represents the job request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobDownload: function (job_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.GeneralApiFp)(configuration).jobDownload(job_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Returns a json list of the versions of the TDEI API which are available.
         * @summary List available API versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiVersions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.GeneralApiFp)(configuration).listApiVersions(options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * This endpoint returns a list of url to zipped geojson files with Dataset data that meet the specified criteria. Criteria that can be specified include: a dataset area (polygon), minimum confidence level and Dataset version.
         * @summary List Dataset files meeting criteria.
         * @param {string} [data_type] Data type of the dataset.
         * @param {string} [status] Request datasets according to their status. By default, when the setting is &#x27;All&#x27;, it displays all datasets. If set to &#x27;Pre-Release&#x27; or &#x27;Publish&#x27;, it includes Pre-Release or Publish datasets for the project groups the user is a part of.
         * @param {string} [name] dataset name or title.
         * @param {string} [version] dataset version.
         * @param {string} [data_source] data source of the dataset.
         * @param {string} [collection_method] Method by which the data was collected.
         * @param {string} [collected_by] Collection agency or person.
         * @param {string} [derived_from_dataset_id] Derived from dataset id.
         * @param {string} [collection_date] Collection date time
         * @param {number} [confidence_level] Minimum confidence level required. Data returned will be at this confidence level or higher. Confidence level range is: 0 (very low confidence) to 100 (very high confidence).
         * @param {string} [schema_version] version name of the data type schema version that the application requests. list of versions can be found with /api/v1/{data_type}/versions.
         * @param {string} [tdei_project_group_id] tdei-assigned project group id. Represented as a UUID.
         * @param {string} [valid_from] Valid from date time. date-time for which the caller is interested in obtaining files.
         * @param {string} [valid_to] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_dataset_id] tdei_dataset_id, unique id represents file.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFiles: function (data_type, status, name, version, data_source, collection_method, collected_by, derived_from_dataset_id, collection_date, confidence_level, schema_version, tdei_project_group_id, valid_from, valid_to, tdei_dataset_id, bbox, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.GeneralApiFp)(configuration).listDatasetFiles(data_type, status, name, version, data_source, collection_method, collected_by, derived_from_dataset_id, collection_date, confidence_level, schema_version, tdei_project_group_id, valid_from, valid_to, tdei_dataset_id, bbox, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * This endpoint returns a list of jobs with status and request details.
         * @summary List job details.
         * @param {string} [job_id] job_id uniquely identifies the job request.
         * @param {string} [job_type] job_type of the job.
         * @param {string} [status] Status of the job.
         * @param {string} [tdei_project_group_id] project group id. Represented as a UUID.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs: function (job_id, job_type, status, tdei_project_group_id, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.GeneralApiFp)(configuration).listJobs(job_id, job_type, status, tdei_project_group_id, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Path used to retrieve the list of project groups with data in the TDEI system. Allows callers to get the tdei_project_group_id id for an project group.  Returns the tdei_project_group_id and project group information for all project groups with data in the TDEI system.
         * @summary List project groups
         * @param {string} [tdei_project_group_id] Search by project group Id.
         * @param {string} [searchText] Search by project group name.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectGroups: function (tdei_project_group_id, searchText, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.GeneralApiFp)(configuration).listProjectGroups(tdei_project_group_id, searchText, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Path used to retrieve the list of Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_project_group_id param is used, will return services for that project group.
         * @summary List Services
         * @param {string} [tdei_service_id] Search by service Id.
         * @param {string} [searchText] Search by service name.
         * @param {string} [tdei_project_group_id] A tdei-assigned id for an project group. project_group_ids can be retrieved using the path /api/v1/project-group.
         * @param {string} [service_type] Service type
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServices: function (tdei_service_id, searchText, tdei_project_group_id, service_type, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.GeneralApiFp)(configuration).listServices(tdei_service_id, searchText, tdei_project_group_id, service_type, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
    };
};
exports.GeneralApiFactory = GeneralApiFactory;
/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
var GeneralApi = /** @class */ (function (_super) {
    __extends(GeneralApi, _super);
    function GeneralApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns boolean true if the action is successful.
     * @summary Invalidates the Dataset
     * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    GeneralApi.prototype.deleteDataset = function (tdei_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.GeneralApiFp)(this.configuration).deleteDataset(tdei_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Downloads the dataset generated by the job
     * @summary Downloads the job download file
     * @param {string} job_id job_id uniquely represents the job request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    GeneralApi.prototype.jobDownload = function (job_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.GeneralApiFp)(this.configuration).jobDownload(job_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Returns a json list of the versions of the TDEI API which are available.
     * @summary List available API versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    GeneralApi.prototype.listApiVersions = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.GeneralApiFp)(this.configuration).listApiVersions(options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * This endpoint returns a list of url to zipped geojson files with Dataset data that meet the specified criteria. Criteria that can be specified include: a dataset area (polygon), minimum confidence level and Dataset version.
     * @summary List Dataset files meeting criteria.
     * @param {string} [data_type] Data type of the dataset.
     * @param {string} [status] Request datasets according to their status. By default, when the setting is &#x27;All&#x27;, it displays all datasets. If set to &#x27;Pre-Release&#x27; or &#x27;Publish&#x27;, it includes Pre-Release or Publish datasets for the project groups the user is a part of.
     * @param {string} [name] dataset name or title.
     * @param {string} [version] dataset version.
     * @param {string} [data_source] data source of the dataset.
     * @param {string} [collection_method] Method by which the data was collected.
     * @param {string} [collected_by] Collection agency or person.
     * @param {string} [derived_from_dataset_id] Derived from dataset id.
     * @param {string} [collection_date] Collection date time
     * @param {number} [confidence_level] Minimum confidence level required. Data returned will be at this confidence level or higher. Confidence level range is: 0 (very low confidence) to 100 (very high confidence).
     * @param {string} [schema_version] version name of the data type schema version that the application requests. list of versions can be found with /api/v1/{data_type}/versions.
     * @param {string} [tdei_project_group_id] tdei-assigned project group id. Represented as a UUID.
     * @param {string} [valid_from] Valid from date time. date-time for which the caller is interested in obtaining files.
     * @param {string} [valid_to] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
     * @param {string} [tdei_dataset_id] tdei_dataset_id, unique id represents file.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {number} [page_no] Integer, defaults to 1.
     * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    GeneralApi.prototype.listDatasetFiles = function (data_type, status, name, version, data_source, collection_method, collected_by, derived_from_dataset_id, collection_date, confidence_level, schema_version, tdei_project_group_id, valid_from, valid_to, tdei_dataset_id, bbox, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.GeneralApiFp)(this.configuration).listDatasetFiles(data_type, status, name, version, data_source, collection_method, collected_by, derived_from_dataset_id, collection_date, confidence_level, schema_version, tdei_project_group_id, valid_from, valid_to, tdei_dataset_id, bbox, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * This endpoint returns a list of jobs with status and request details.
     * @summary List job details.
     * @param {string} [job_id] job_id uniquely identifies the job request.
     * @param {string} [job_type] job_type of the job.
     * @param {string} [status] Status of the job.
     * @param {string} [tdei_project_group_id] project group id. Represented as a UUID.
     * @param {number} [page_no] Integer, defaults to 1.
     * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    GeneralApi.prototype.listJobs = function (job_id, job_type, status, tdei_project_group_id, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.GeneralApiFp)(this.configuration).listJobs(job_id, job_type, status, tdei_project_group_id, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Path used to retrieve the list of project groups with data in the TDEI system. Allows callers to get the tdei_project_group_id id for an project group.  Returns the tdei_project_group_id and project group information for all project groups with data in the TDEI system.
     * @summary List project groups
     * @param {string} [tdei_project_group_id] Search by project group Id.
     * @param {string} [searchText] Search by project group name.
     * @param {number} [page_no] Integer, defaults to 1.
     * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    GeneralApi.prototype.listProjectGroups = function (tdei_project_group_id, searchText, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.GeneralApiFp)(this.configuration).listProjectGroups(tdei_project_group_id, searchText, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Path used to retrieve the list of Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_project_group_id param is used, will return services for that project group.
     * @summary List Services
     * @param {string} [tdei_service_id] Search by service Id.
     * @param {string} [searchText] Search by service name.
     * @param {string} [tdei_project_group_id] A tdei-assigned id for an project group. project_group_ids can be retrieved using the path /api/v1/project-group.
     * @param {string} [service_type] Service type
     * @param {number} [page_no] Integer, defaults to 1.
     * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    GeneralApi.prototype.listServices = function (tdei_service_id, searchText, tdei_project_group_id, service_type, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.GeneralApiFp)(this.configuration).listServices(tdei_service_id, searchText, tdei_project_group_id, service_type, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    return GeneralApi;
}(base_1.BaseAPI));
exports.GeneralApi = GeneralApi;
