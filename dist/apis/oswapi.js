"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OSWApi = exports.OSWApiFactory = exports.OSWApiFp = exports.OSWApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) system. It is intended for applications submitting data to and consuming data from the TDEI system. We currently support GTFS-Pathways, GTFS-Flex and OpenSidewalks (OSW) data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: admin@tdei.us
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * OSWApi - axios parameter creator
 * @export
 */
var OSWApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Returns a subgraph dataset that falls within a specified bounding box
         * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
         * @param {string} file_type Dataset output file type.
         * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetBbox: function (tdei_dataset_id, file_type, bbox, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling datasetBbox.');
                            }
                            // verify required parameter 'file_type' is not null or undefined
                            if (file_type === null || file_type === undefined) {
                                throw new base_1.RequiredError('file_type', 'Required parameter file_type was null or undefined when calling datasetBbox.');
                            }
                            // verify required parameter 'bbox' is not null or undefined
                            if (bbox === null || bbox === undefined) {
                                throw new base_1.RequiredError('bbox', 'Required parameter bbox was null or undefined when calling datasetBbox.');
                            }
                            localVarPath = "/api/v1/osw/dataset-bbox";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (tdei_dataset_id !== undefined) {
                                localVarQueryParameter['tdei_dataset_id'] = tdei_dataset_id;
                            }
                            if (file_type !== undefined) {
                                localVarQueryParameter['file_type'] = file_type;
                            }
                            if (bbox) {
                                localVarQueryParameter['bbox'] = bbox;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagIncline: function (tdei_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling datasetTagIncline.');
                            }
                            localVarPath = "/api/v1/osw/dataset-inclination/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Tags the sidewalks with the road network within proximity.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagRoad: function (source_dataset_id, target_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'source_dataset_id' is not null or undefined
                            if (source_dataset_id === null || source_dataset_id === undefined) {
                                throw new base_1.RequiredError('source_dataset_id', 'Required parameter source_dataset_id was null or undefined when calling datasetTagRoad.');
                            }
                            // verify required parameter 'target_dataset_id' is not null or undefined
                            if (target_dataset_id === null || target_dataset_id === undefined) {
                                throw new base_1.RequiredError('target_dataset_id', 'Required parameter target_dataset_id was null or undefined when calling datasetTagRoad.');
                            }
                            localVarPath = "/api/v1/osw/dataset-tag-road";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (source_dataset_id !== undefined) {
                                localVarQueryParameter['source_dataset_id'] = source_dataset_id;
                            }
                            if (target_dataset_id !== undefined) {
                                localVarQueryParameter['target_dataset_id'] = target_dataset_id;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
         * @summary Downloads the OSW dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
         * @param {string} [file_version] The Latest version includes any recent modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOswFile: function (tdei_dataset_id, format, file_version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling getOswFile.');
                            }
                            localVarPath = "/api/v1/osw/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (format !== undefined) {
                                localVarQueryParameter['format'] = format;
                            }
                            if (file_version !== undefined) {
                                localVarQueryParameter['file_version'] = file_version;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOswVersions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/osw/versions";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate confidence calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswConfidenceCalculateForm: function (tdei_dataset_id, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling oswConfidenceCalculateForm.');
                            }
                            localVarPath = "/api/v1/osw/confidence/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new FormData();
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates the visibility preferences for a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter and modifies the dataset's visibility settings.
         * @summary Updates the visibility preferences for the dataset viewer.
         * @param {DatasetviewerTdeiDatasetIdBody} body
         * @param {string} tdei_dataset_id Dataset ID for updating the dataset viewer preferences.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewer: function (body, tdei_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling oswDatasetViewer.');
                            }
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling oswDatasetViewer.');
                            }
                            localVarPath = "/api/v1/osw/dataset-viewer/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Accepts the feedback from the dataset viewer. The feedback is stored in the system for further analysis and improvement of the dataset.
         * @summary Accepts the feedback from the dataset viewer.
         * @param {ProjectIdTdeiDatasetIdBody} body
         * @param {string} project_id ID of the project group.
         * @param {string} tdei_dataset_id ID of the dataset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedback: function (body, project_id, tdei_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling oswDatasetViewerFeedback.');
                            }
                            // verify required parameter 'project_id' is not null or undefined
                            if (project_id === null || project_id === undefined) {
                                throw new base_1.RequiredError('project_id', 'Required parameter project_id was null or undefined when calling oswDatasetViewerFeedback.');
                            }
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling oswDatasetViewerFeedback.');
                            }
                            localVarPath = "/api/v1/osw/dataset-viewer/feedbacks/{project_id}/{tdei_dataset_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(project_id)))
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the dataset viewer feedbacks. Response includes a list of feedbacks provided by users regarding the dataset. Each feedback contains details such as the dataset element ID, feedback text, customer email, and location information.
         * @summary Retrieves the dataset viewer feedbacks.
         * @param {string} [tdei_project_group_id] ID of the project group.
         * @param {string} [tdei_dataset_id] ID of the dataset.
         * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created after this date.
         * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created before this date.
         * @param {string} [status] &lt;strong&gt;status:&lt;/strong&gt; Filters feedbacks by their status.
         * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
         * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
         * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, defaults to 1. Specifies the page number to retrieve.
         * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50, defaults to 10. Specifies total records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacks: function (tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, sort_order, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            localVarPath = "/api/v1/osw/dataset-viewer/feedbacks";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (tdei_project_group_id !== undefined) {
                                localVarQueryParameter['tdei_project_group_id'] = tdei_project_group_id;
                            }
                            if (tdei_dataset_id !== undefined) {
                                localVarQueryParameter['tdei_dataset_id'] = tdei_dataset_id;
                            }
                            if (from_date !== undefined) {
                                localVarQueryParameter['from_date'] = (from_date instanceof Date) ?
                                    from_date.toISOString() :
                                    from_date;
                            }
                            if (to_date !== undefined) {
                                localVarQueryParameter['to_date'] = (to_date instanceof Date) ?
                                    to_date.toISOString() :
                                    to_date;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (sort_by !== undefined) {
                                localVarQueryParameter['sort_by'] = sort_by;
                            }
                            if (sort_order !== undefined) {
                                localVarQueryParameter['sort_order'] = sort_order;
                            }
                            if (page_no !== undefined) {
                                localVarQueryParameter['page_no'] = page_no;
                            }
                            if (page_size !== undefined) {
                                localVarQueryParameter['page_size'] = page_size;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Streams all feedback for the specified project group in CSV format. Requires poc or osw_data_generator role.
         * @summary Downloads dataset viewer feedbacks as a CSV.
         * @param {string} tdei_project_group_id Valid TDEI project group id.
         * @param {string} [tdei_dataset_id] ID of the dataset.
         * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedback created after this date.
         * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedback created before this date.
         * @param {string} [status] &lt;strong&gt;status:&lt;/strong&gt; Filters feedbacks by their status.
         * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
         * @param {string} [due_date] &lt;strong&gt;due_date:&lt;/strong&gt; Legacy alias for &lt;code&gt;sort_by&lt;/code&gt;. Use &#x27;created_at&#x27; or &#x27;due_date&#x27;.
         * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
         * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, specifies the page number to retrieve. If omitted with page_size, the response is unpaginated.
         * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50. If omitted with page_no, the response is unpaginated.
         * @param {string} [format] &lt;strong&gt;format:&lt;/strong&gt; Output format. Only &#x27;csv&#x27; is supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacksDownload: function (tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, due_date, sort_order, page_no, page_size, format, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'tdei_project_group_id' is not null or undefined
                            if (tdei_project_group_id === null || tdei_project_group_id === undefined) {
                                throw new base_1.RequiredError('tdei_project_group_id', 'Required parameter tdei_project_group_id was null or undefined when calling oswDatasetViewerFeedbacksDownload.');
                            }
                            localVarPath = "/api/v1/osw/dataset-viewer/feedbacks/download/{tdei_project_group_id}"
                                .replace("{".concat("tdei_project_group_id", "}"), encodeURIComponent(String(tdei_project_group_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (tdei_dataset_id !== undefined) {
                                localVarQueryParameter['tdei_dataset_id'] = tdei_dataset_id;
                            }
                            if (from_date !== undefined) {
                                localVarQueryParameter['from_date'] = (from_date instanceof Date) ?
                                    from_date.toISOString() :
                                    from_date;
                            }
                            if (to_date !== undefined) {
                                localVarQueryParameter['to_date'] = (to_date instanceof Date) ?
                                    to_date.toISOString() :
                                    to_date;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (sort_by !== undefined) {
                                localVarQueryParameter['sort_by'] = sort_by;
                            }
                            if (due_date !== undefined) {
                                localVarQueryParameter['due_date'] = due_date;
                            }
                            if (sort_order !== undefined) {
                                localVarQueryParameter['sort_order'] = sort_order;
                            }
                            if (page_no !== undefined) {
                                localVarQueryParameter['page_no'] = page_no;
                            }
                            if (page_size !== undefined) {
                                localVarQueryParameter['page_size'] = page_size;
                            }
                            if (format !== undefined) {
                                localVarQueryParameter['format'] = format;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the feedbacks summary. Response includes a summary of feedbacks such as total count, total overdue, and other relevant statistics.
         * @summary Retrieves the feedbacks summary.
         * @param {string} [tdei_project_group_id] ID of the project group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacksMetadata: function (tdei_project_group_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            localVarPath = "/api/v1/osw/dataset-viewer/feedbacks/metadata";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (tdei_project_group_id !== undefined) {
                                localVarQueryParameter['tdei_project_group_id'] = tdei_project_group_id;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the PM tiles SAS url for a specified dataset identified by the tdei_dataset_id.
         * @summary Retrives the PM tiles SAS url for the dataset.
         * @param {string} tdei_dataset_id Dataset ID for retrieving the PM tiles SAS url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerPMTiles: function (tdei_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling oswDatasetViewerPMTiles.');
                            }
                            localVarPath = "/api/v1/osw/dataset-viewer/pm-tiles/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary OSW dataset conversion on demand
         * @param {Blob} file
         * @param {string} source_format
         * @param {string} target_format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswOnDemandFormatForm: function (file, source_format, target_format, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'file' is not null or undefined
                            if (file === null || file === undefined) {
                                throw new base_1.RequiredError('file', 'Required parameter file was null or undefined when calling oswOnDemandFormatForm.');
                            }
                            // verify required parameter 'source_format' is not null or undefined
                            if (source_format === null || source_format === undefined) {
                                throw new base_1.RequiredError('source_format', 'Required parameter source_format was null or undefined when calling oswOnDemandFormatForm.');
                            }
                            // verify required parameter 'target_format' is not null or undefined
                            if (target_format === null || target_format === undefined) {
                                throw new base_1.RequiredError('target_format', 'Required parameter target_format was null or undefined when calling oswOnDemandFormatForm.');
                            }
                            localVarPath = "/api/v1/osw/convert";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new FormData();
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            if (source_format !== undefined) {
                                localVarFormParams.append('source_format', source_format);
                            }
                            if (target_format !== undefined) {
                                localVarFormParams.append('target_format', target_format);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswQualityCalculateForm: function (tdei_dataset_id, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling oswQualityCalculateForm.');
                            }
                            localVarPath = "/api/v1/osw/quality-metric/ixn/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new FormData();
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a spatial join operation between two datasets within the TDEI system.
         * @param {OswSpatialjoinBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswSpatialJoin: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling oswSpatialJoin.');
                            }
                            localVarPath = "/api/v1/osw/spatial-join";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This function merges spatial data from two datasets by unifying overlapping nodes, edges, and polygons into consolidated geometries. It identifies equivalent nodes based on proximity, aligns and merges overlapping edges, and combines adjacent polygons. The function outputs a single cohesive dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a union of the two input OSW datasets.
         * @param {OswUnionBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswUnion: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling oswUnion.');
                            }
                            localVarPath = "/api/v1/osw/union";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishOswFile: function (tdei_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling publishOswFile.');
                            }
                            localVarPath = "/api/v1/osw/publish/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file
         * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityMetricTagForm: function (file, tdei_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'file' is not null or undefined
                            if (file === null || file === undefined) {
                                throw new base_1.RequiredError('file', 'Required parameter file was null or undefined when calling qualityMetricTagForm.');
                            }
                            // verify required parameter 'tdei_dataset_id' is not null or undefined
                            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                                throw new base_1.RequiredError('tdei_dataset_id', 'Required parameter tdei_dataset_id was null or undefined when calling qualityMetricTagForm.');
                            }
                            localVarPath = "/api/v1/osw/quality-metric/tag/{tdei_dataset_id}"
                                .replace("{".concat("tdei_dataset_id", "}"), encodeURIComponent(String(tdei_dataset_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new FormData();
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
         * @summary Upload a OSW dataset.
         * @param {Blob} dataset
         * @param {Blob} metadata
         * @param {Blob} changeset
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOswFileForm: function (dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'dataset' is not null or undefined
                            if (dataset === null || dataset === undefined) {
                                throw new base_1.RequiredError('dataset', 'Required parameter dataset was null or undefined when calling uploadOswFileForm.');
                            }
                            // verify required parameter 'metadata' is not null or undefined
                            if (metadata === null || metadata === undefined) {
                                throw new base_1.RequiredError('metadata', 'Required parameter metadata was null or undefined when calling uploadOswFileForm.');
                            }
                            // verify required parameter 'changeset' is not null or undefined
                            if (changeset === null || changeset === undefined) {
                                throw new base_1.RequiredError('changeset', 'Required parameter changeset was null or undefined when calling uploadOswFileForm.');
                            }
                            // verify required parameter 'tdei_project_group_id' is not null or undefined
                            if (tdei_project_group_id === null || tdei_project_group_id === undefined) {
                                throw new base_1.RequiredError('tdei_project_group_id', 'Required parameter tdei_project_group_id was null or undefined when calling uploadOswFileForm.');
                            }
                            // verify required parameter 'tdei_service_id' is not null or undefined
                            if (tdei_service_id === null || tdei_service_id === undefined) {
                                throw new base_1.RequiredError('tdei_service_id', 'Required parameter tdei_service_id was null or undefined when calling uploadOswFileForm.');
                            }
                            localVarPath = "/api/v1/osw/upload/{tdei_project_group_id}/{tdei_service_id}"
                                .replace("{".concat("tdei_project_group_id", "}"), encodeURIComponent(String(tdei_project_group_id)))
                                .replace("{".concat("tdei_service_id", "}"), encodeURIComponent(String(tdei_service_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new FormData();
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (derived_from_dataset_id !== undefined) {
                                localVarQueryParameter['derived_from_dataset_id'] = derived_from_dataset_id;
                            }
                            if (dataset !== undefined) {
                                localVarFormParams.append('dataset', dataset);
                            }
                            if (metadata !== undefined) {
                                localVarFormParams.append('metadata', metadata);
                            }
                            if (changeset !== undefined) {
                                localVarFormParams.append('changeset', changeset);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOswFileForm: function (dataset, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'dataset' is not null or undefined
                            if (dataset === null || dataset === undefined) {
                                throw new base_1.RequiredError('dataset', 'Required parameter dataset was null or undefined when calling validateOswFileForm.');
                            }
                            localVarPath = "/api/v1/osw/validate";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new FormData();
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (dataset !== undefined) {
                                localVarFormParams.append('dataset', dataset);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSWApiAxiosParamCreator = OSWApiAxiosParamCreator;
/**
 * OSWApi - functional programming interface
 * @export
 */
var OSWApiFp = function (configuration) {
    return {
        /**
         * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Returns a subgraph dataset that falls within a specified bounding box
         * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
         * @param {string} file_type Dataset output file type.
         * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetBbox: function (tdei_dataset_id, file_type, bbox, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagIncline: function (tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).datasetTagIncline(tdei_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Tags the sidewalks with the road network within proximity.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagRoad: function (source_dataset_id, target_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
         * @summary Downloads the OSW dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
         * @param {string} [file_version] The Latest version includes any recent modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOswFile: function (tdei_dataset_id, format, file_version, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).getOswFile(tdei_dataset_id, format, file_version, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOswVersions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).listOswVersions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate confidence calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswConfidenceCalculateForm: function (tdei_dataset_id, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates the visibility preferences for a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter and modifies the dataset's visibility settings.
         * @summary Updates the visibility preferences for the dataset viewer.
         * @param {DatasetviewerTdeiDatasetIdBody} body
         * @param {string} tdei_dataset_id Dataset ID for updating the dataset viewer preferences.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewer: function (body, tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswDatasetViewer(body, tdei_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Accepts the feedback from the dataset viewer. The feedback is stored in the system for further analysis and improvement of the dataset.
         * @summary Accepts the feedback from the dataset viewer.
         * @param {ProjectIdTdeiDatasetIdBody} body
         * @param {string} project_id ID of the project group.
         * @param {string} tdei_dataset_id ID of the dataset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedback: function (body, project_id, tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswDatasetViewerFeedback(body, project_id, tdei_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the dataset viewer feedbacks. Response includes a list of feedbacks provided by users regarding the dataset. Each feedback contains details such as the dataset element ID, feedback text, customer email, and location information.
         * @summary Retrieves the dataset viewer feedbacks.
         * @param {string} [tdei_project_group_id] ID of the project group.
         * @param {string} [tdei_dataset_id] ID of the dataset.
         * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created after this date.
         * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created before this date.
         * @param {string} [status] &lt;strong&gt;status:&lt;/strong&gt; Filters feedbacks by their status.
         * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
         * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
         * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, defaults to 1. Specifies the page number to retrieve.
         * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50, defaults to 10. Specifies total records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacks: function (tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, sort_order, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswDatasetViewerFeedbacks(tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, sort_order, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Streams all feedback for the specified project group in CSV format. Requires poc or osw_data_generator role.
         * @summary Downloads dataset viewer feedbacks as a CSV.
         * @param {string} tdei_project_group_id Valid TDEI project group id.
         * @param {string} [tdei_dataset_id] ID of the dataset.
         * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedback created after this date.
         * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedback created before this date.
         * @param {string} [status] &lt;strong&gt;status:&lt;/strong&gt; Filters feedbacks by their status.
         * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
         * @param {string} [due_date] &lt;strong&gt;due_date:&lt;/strong&gt; Legacy alias for &lt;code&gt;sort_by&lt;/code&gt;. Use &#x27;created_at&#x27; or &#x27;due_date&#x27;.
         * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
         * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, specifies the page number to retrieve. If omitted with page_size, the response is unpaginated.
         * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50. If omitted with page_no, the response is unpaginated.
         * @param {string} [format] &lt;strong&gt;format:&lt;/strong&gt; Output format. Only &#x27;csv&#x27; is supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacksDownload: function (tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, due_date, sort_order, page_no, page_size, format, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswDatasetViewerFeedbacksDownload(tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, due_date, sort_order, page_no, page_size, format, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the feedbacks summary. Response includes a summary of feedbacks such as total count, total overdue, and other relevant statistics.
         * @summary Retrieves the feedbacks summary.
         * @param {string} [tdei_project_group_id] ID of the project group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacksMetadata: function (tdei_project_group_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswDatasetViewerFeedbacksMetadata(tdei_project_group_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the PM tiles SAS url for a specified dataset identified by the tdei_dataset_id.
         * @summary Retrives the PM tiles SAS url for the dataset.
         * @param {string} tdei_dataset_id Dataset ID for retrieving the PM tiles SAS url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerPMTiles: function (tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswDatasetViewerPMTiles(tdei_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary OSW dataset conversion on demand
         * @param {Blob} file
         * @param {string} source_format
         * @param {string} target_format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswOnDemandFormatForm: function (file, source_format, target_format, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswOnDemandFormatForm(file, source_format, target_format, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswQualityCalculateForm: function (tdei_dataset_id, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswQualityCalculateForm(tdei_dataset_id, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a spatial join operation between two datasets within the TDEI system.
         * @param {OswSpatialjoinBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswSpatialJoin: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswSpatialJoin(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * This function merges spatial data from two datasets by unifying overlapping nodes, edges, and polygons into consolidated geometries. It identifies equivalent nodes based on proximity, aligns and merges overlapping edges, and combines adjacent polygons. The function outputs a single cohesive dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a union of the two input OSW datasets.
         * @param {OswUnionBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswUnion: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).oswUnion(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishOswFile: function (tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).publishOswFile(tdei_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file
         * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityMetricTagForm: function (file, tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).qualityMetricTagForm(file, tdei_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
         * @summary Upload a OSW dataset.
         * @param {Blob} dataset
         * @param {Blob} metadata
         * @param {Blob} changeset
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOswFileForm: function (dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOswFileForm: function (dataset, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OSWApiAxiosParamCreator)(configuration).validateOswFileForm(dataset, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.OSWApiFp = OSWApiFp;
/**
 * OSWApi - factory interface
 * @export
 */
var OSWApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Returns a subgraph dataset that falls within a specified bounding box
         * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
         * @param {string} file_type Dataset output file type.
         * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetBbox: function (tdei_dataset_id, file_type, bbox, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagIncline: function (tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).datasetTagIncline(tdei_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Tags the sidewalks with the road network within proximity.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagRoad: function (source_dataset_id, target_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
         * @summary Downloads the OSW dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
         * @param {string} [file_version] The Latest version includes any recent modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOswFile: function (tdei_dataset_id, format, file_version, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).getOswFile(tdei_dataset_id, format, file_version, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOswVersions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).listOswVersions(options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate confidence calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswConfidenceCalculateForm: function (tdei_dataset_id, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Updates the visibility preferences for a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter and modifies the dataset's visibility settings.
         * @summary Updates the visibility preferences for the dataset viewer.
         * @param {DatasetviewerTdeiDatasetIdBody} body
         * @param {string} tdei_dataset_id Dataset ID for updating the dataset viewer preferences.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewer: function (body, tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswDatasetViewer(body, tdei_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Accepts the feedback from the dataset viewer. The feedback is stored in the system for further analysis and improvement of the dataset.
         * @summary Accepts the feedback from the dataset viewer.
         * @param {ProjectIdTdeiDatasetIdBody} body
         * @param {string} project_id ID of the project group.
         * @param {string} tdei_dataset_id ID of the dataset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedback: function (body, project_id, tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswDatasetViewerFeedback(body, project_id, tdei_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Retrieves the dataset viewer feedbacks. Response includes a list of feedbacks provided by users regarding the dataset. Each feedback contains details such as the dataset element ID, feedback text, customer email, and location information.
         * @summary Retrieves the dataset viewer feedbacks.
         * @param {string} [tdei_project_group_id] ID of the project group.
         * @param {string} [tdei_dataset_id] ID of the dataset.
         * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created after this date.
         * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created before this date.
         * @param {string} [status] &lt;strong&gt;status:&lt;/strong&gt; Filters feedbacks by their status.
         * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
         * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
         * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, defaults to 1. Specifies the page number to retrieve.
         * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50, defaults to 10. Specifies total records per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacks: function (tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, sort_order, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswDatasetViewerFeedbacks(tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, sort_order, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Streams all feedback for the specified project group in CSV format. Requires poc or osw_data_generator role.
         * @summary Downloads dataset viewer feedbacks as a CSV.
         * @param {string} tdei_project_group_id Valid TDEI project group id.
         * @param {string} [tdei_dataset_id] ID of the dataset.
         * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedback created after this date.
         * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedback created before this date.
         * @param {string} [status] &lt;strong&gt;status:&lt;/strong&gt; Filters feedbacks by their status.
         * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
         * @param {string} [due_date] &lt;strong&gt;due_date:&lt;/strong&gt; Legacy alias for &lt;code&gt;sort_by&lt;/code&gt;. Use &#x27;created_at&#x27; or &#x27;due_date&#x27;.
         * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
         * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, specifies the page number to retrieve. If omitted with page_size, the response is unpaginated.
         * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50. If omitted with page_no, the response is unpaginated.
         * @param {string} [format] &lt;strong&gt;format:&lt;/strong&gt; Output format. Only &#x27;csv&#x27; is supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacksDownload: function (tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, due_date, sort_order, page_no, page_size, format, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswDatasetViewerFeedbacksDownload(tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, due_date, sort_order, page_no, page_size, format, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Retrieves the feedbacks summary. Response includes a summary of feedbacks such as total count, total overdue, and other relevant statistics.
         * @summary Retrieves the feedbacks summary.
         * @param {string} [tdei_project_group_id] ID of the project group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerFeedbacksMetadata: function (tdei_project_group_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswDatasetViewerFeedbacksMetadata(tdei_project_group_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Retrieves the PM tiles SAS url for a specified dataset identified by the tdei_dataset_id.
         * @summary Retrives the PM tiles SAS url for the dataset.
         * @param {string} tdei_dataset_id Dataset ID for retrieving the PM tiles SAS url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswDatasetViewerPMTiles: function (tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswDatasetViewerPMTiles(tdei_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary OSW dataset conversion on demand
         * @param {Blob} file
         * @param {string} source_format
         * @param {string} target_format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswOnDemandFormatForm: function (file, source_format, target_format, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswOnDemandFormatForm(file, source_format, target_format, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswQualityCalculateForm: function (tdei_dataset_id, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswQualityCalculateForm(tdei_dataset_id, file, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a spatial join operation between two datasets within the TDEI system.
         * @param {OswSpatialjoinBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswSpatialJoin: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswSpatialJoin(body, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * This function merges spatial data from two datasets by unifying overlapping nodes, edges, and polygons into consolidated geometries. It identifies equivalent nodes based on proximity, aligns and merges overlapping edges, and combines adjacent polygons. The function outputs a single cohesive dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a union of the two input OSW datasets.
         * @param {OswUnionBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswUnion: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).oswUnion(body, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishOswFile: function (tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).publishOswFile(tdei_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file
         * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityMetricTagForm: function (file, tdei_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).qualityMetricTagForm(file, tdei_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
         * @summary Upload a OSW dataset.
         * @param {Blob} dataset
         * @param {Blob} metadata
         * @param {Blob} changeset
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOswFileForm: function (dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOswFileForm: function (dataset, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.OSWApiFp)(configuration).validateOswFileForm(dataset, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
    };
};
exports.OSWApiFactory = OSWApiFactory;
/**
 * OSWApi - object-oriented interface
 * @export
 * @class OSWApi
 * @extends {BaseAPI}
 */
var OSWApi = /** @class */ (function (_super) {
    __extends(OSWApi, _super);
    function OSWApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Returns a subgraph dataset that falls within a specified bounding box
     * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
     * @param {string} file_type Dataset output file type.
     * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.datasetBbox = function (tdei_dataset_id, file_type, bbox, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Adds the incline tag to the dataset
     * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.datasetTagIncline = function (tdei_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).datasetTagIncline(tdei_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Tags the sidewalks with the road network within proximity.
     * @param {string} source_dataset_id Dataset from which the road network to be retrieved
     * @param {string} target_dataset_id Dataset for which the road network is to be tagged
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.datasetTagRoad = function (source_dataset_id, target_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
     * @summary Downloads the OSW dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
     * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
     * @param {string} [file_version] The Latest version includes any recent modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.getOswFile = function (tdei_dataset_id, format, file_version, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).getOswFile(tdei_dataset_id, format, file_version, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
     * @summary List available OSW versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.listOswVersions = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).listOswVersions(options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate confidence calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswConfidenceCalculateForm = function (tdei_dataset_id, file, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Updates the visibility preferences for a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter and modifies the dataset's visibility settings.
     * @summary Updates the visibility preferences for the dataset viewer.
     * @param {DatasetviewerTdeiDatasetIdBody} body
     * @param {string} tdei_dataset_id Dataset ID for updating the dataset viewer preferences.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswDatasetViewer = function (body, tdei_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswDatasetViewer(body, tdei_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Accepts the feedback from the dataset viewer. The feedback is stored in the system for further analysis and improvement of the dataset.
     * @summary Accepts the feedback from the dataset viewer.
     * @param {ProjectIdTdeiDatasetIdBody} body
     * @param {string} project_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswDatasetViewerFeedback = function (body, project_id, tdei_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswDatasetViewerFeedback(body, project_id, tdei_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Retrieves the dataset viewer feedbacks. Response includes a list of feedbacks provided by users regarding the dataset. Each feedback contains details such as the dataset element ID, feedback text, customer email, and location information.
     * @summary Retrieves the dataset viewer feedbacks.
     * @param {string} [tdei_project_group_id] ID of the project group.
     * @param {string} [tdei_dataset_id] ID of the dataset.
     * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created after this date.
     * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created before this date.
     * @param {string} [status] &lt;strong&gt;status:&lt;/strong&gt; Filters feedbacks by their status.
     * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
     * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
     * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, defaults to 1. Specifies the page number to retrieve.
     * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50, defaults to 10. Specifies total records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswDatasetViewerFeedbacks = function (tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, sort_order, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswDatasetViewerFeedbacks(tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, sort_order, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Streams all feedback for the specified project group in CSV format. Requires poc or osw_data_generator role.
     * @summary Downloads dataset viewer feedbacks as a CSV.
     * @param {string} tdei_project_group_id Valid TDEI project group id.
     * @param {string} [tdei_dataset_id] ID of the dataset.
     * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedback created after this date.
     * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedback created before this date.
     * @param {string} [status] &lt;strong&gt;status:&lt;/strong&gt; Filters feedbacks by their status.
     * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
     * @param {string} [due_date] &lt;strong&gt;due_date:&lt;/strong&gt; Legacy alias for &lt;code&gt;sort_by&lt;/code&gt;. Use &#x27;created_at&#x27; or &#x27;due_date&#x27;.
     * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
     * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, specifies the page number to retrieve. If omitted with page_size, the response is unpaginated.
     * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50. If omitted with page_no, the response is unpaginated.
     * @param {string} [format] &lt;strong&gt;format:&lt;/strong&gt; Output format. Only &#x27;csv&#x27; is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswDatasetViewerFeedbacksDownload = function (tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, due_date, sort_order, page_no, page_size, format, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswDatasetViewerFeedbacksDownload(tdei_project_group_id, tdei_dataset_id, from_date, to_date, status, sort_by, due_date, sort_order, page_no, page_size, format, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Retrieves the feedbacks summary. Response includes a summary of feedbacks such as total count, total overdue, and other relevant statistics.
     * @summary Retrieves the feedbacks summary.
     * @param {string} [tdei_project_group_id] ID of the project group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswDatasetViewerFeedbacksMetadata = function (tdei_project_group_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswDatasetViewerFeedbacksMetadata(tdei_project_group_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Retrieves the PM tiles SAS url for a specified dataset identified by the tdei_dataset_id.
     * @summary Retrives the PM tiles SAS url for the dataset.
     * @param {string} tdei_dataset_id Dataset ID for retrieving the PM tiles SAS url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswDatasetViewerPMTiles = function (tdei_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswDatasetViewerPMTiles(tdei_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary OSW dataset conversion on demand
     * @param {Blob} file
     * @param {string} source_format
     * @param {string} target_format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswOnDemandFormatForm = function (file, source_format, target_format, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswOnDemandFormatForm(file, source_format, target_format, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate Intersection Quality metric calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswQualityCalculateForm = function (tdei_dataset_id, file, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswQualityCalculateForm(tdei_dataset_id, file, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a spatial join operation between two datasets within the TDEI system.
     * @param {OswSpatialjoinBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswSpatialJoin = function (body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswSpatialJoin(body, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * This function merges spatial data from two datasets by unifying overlapping nodes, edges, and polygons into consolidated geometries. It identifies equivalent nodes based on proximity, aligns and merges overlapping edges, and combines adjacent polygons. The function outputs a single cohesive dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a union of the two input OSW datasets.
     * @param {OswUnionBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.oswUnion = function (body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).oswUnion(body, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Publishes the OSW dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.publishOswFile = function (tdei_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).publishOswFile(tdei_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
     * @summary Calculates the quality metric on a dataset element tags
     * @param {Blob} file
     * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.qualityMetricTagForm = function (file, tdei_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).qualityMetricTagForm(file, tdei_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
     * @summary Upload a OSW dataset.
     * @param {Blob} dataset
     * @param {Blob} metadata
     * @param {Blob} changeset
     * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
     * @param {string} tdei_service_id TDEI service id associated with the above project group id.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.uploadOswFileForm = function (dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Validates the osw dataset.
     * @param {Blob} dataset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    OSWApi.prototype.validateOswFileForm = function (dataset, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.OSWApiFp)(this.configuration).validateOswFileForm(dataset, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    return OSWApi;
}(base_1.BaseAPI));
exports.OSWApi = OSWApi;
