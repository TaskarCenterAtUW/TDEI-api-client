/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) system. It is intended for applications submitting data to and consuming data from the TDEI system. We currently support GTFS-Pathways, GTFS-Flex and OpenSidewalks (OSW) data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: admin@tdei.us
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DatasetviewerTdeiDatasetIdBody } from '../models';
import { Feedback } from '../models';
import { FeedbackMetadata } from '../models';
import { InlineResponse200 } from '../models';
import { OswSpatialjoinBody } from '../models';
import { OswUnionBody } from '../models';
import { ProjectIdTdeiDatasetIdBody } from '../models';
import { VersionList } from '../models';
/**
 * OSWApi - axios parameter creator
 * @export
 */
export declare const OSWApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Returns a subgraph dataset that falls within a specified bounding box
     * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
     * @param {string} file_type Dataset output file type.
     * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetBbox: (tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Adds the incline tag to the dataset
     * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetTagIncline: (tdei_dataset_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Tags the sidewalks with the road network within proximity.
     * @param {string} source_dataset_id Dataset from which the road network to be retrieved
     * @param {string} target_dataset_id Dataset for which the road network is to be tagged
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetTagRoad: (source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
     * @summary Downloads the OSW dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
     * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
     * @param {string} [file_version] The Latest version includes any recent modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOswFile: (tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
     * @summary List available OSW versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOswVersions: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate confidence calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswConfidenceCalculateForm: (tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the visibility preferences for a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter and modifies the dataset's visibility settings.
     * @summary Updates the visibility preferences for the dataset viewer.
     * @param {DatasetviewerTdeiDatasetIdBody} body
     * @param {string} tdei_dataset_id Dataset ID for updating the dataset viewer preferences.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewer: (body: DatasetviewerTdeiDatasetIdBody, tdei_dataset_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Accepts the feedback from the dataset viewer. The feedback is stored in the system for further analysis and improvement of the dataset viewer experience.
     * @summary Accepts the feedback from the dataset viewer.
     * @param {ProjectIdTdeiDatasetIdBody} body
     * @param {string} project_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedback: (body: ProjectIdTdeiDatasetIdBody, project_id: string, tdei_dataset_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the feedbacks from the dataset viewer. Response includes a list of feedbacks provided by users regarding the dataset viewer. Each feedback contains details such as the dataset element ID, feedback text, customer email, and location information.
     * @summary Retrieves the feedbacks from the dataset viewer.
     * @param {string} tdei_project_group_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created after this date.
     * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created before this date.
     * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
     * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
     * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, defaults to 1. Filters feedbacks by retrieving results in pages.
     * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50, defaults to 10.Specifies total records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedbacks: (tdei_project_group_id: string, tdei_dataset_id: string, from_date?: Date, to_date?: Date, sort_by?: string, sort_order?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the feedbacks metadata. Response includes a summary of feedbacks such as total count, total overdue, and other relevant statistics.
     * @summary Retrieves the feedbacks metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedbacksMetadata: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary OSW dataset conversion on demand
     * @param {Blob} file
     * @param {string} source_format
     * @param {string} target_format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswOnDemandFormatForm: (file: Blob, source_format: string, target_format: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate Intersection Quality metric calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswQualityCalculateForm: (tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a spatial join operation between two datasets within the TDEI system.
     * @param {OswSpatialjoinBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswSpatialJoin: (body: OswSpatialjoinBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This function merges spatial data from two datasets by unifying overlapping nodes, edges, and polygons into consolidated geometries. It identifies equivalent nodes based on proximity, aligns and merges overlapping edges, and combines adjacent polygons. The function outputs a single cohesive dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a union of the two input OSW datasets.
     * @param {OswUnionBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswUnion: (body: OswUnionBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Publishes the OSW dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishOswFile: (tdei_dataset_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
     * @summary Calculates the quality metric on a dataset element tags
     * @param {Blob} file
     * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    qualityMetricTagForm: (file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
     * @summary Upload a OSW dataset.
     * @param {Blob} dataset
     * @param {Blob} metadata
     * @param {Blob} changeset
     * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
     * @param {string} tdei_service_id TDEI service id associated with the above project group id.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOswFileForm: (dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Validates the osw dataset.
     * @param {Blob} dataset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateOswFileForm: (dataset: Blob, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSWApi - functional programming interface
 * @export
 */
export declare const OSWApiFp: (configuration?: Configuration) => {
    /**
     * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Returns a subgraph dataset that falls within a specified bounding box
     * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
     * @param {string} file_type Dataset output file type.
     * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Adds the incline tag to the dataset
     * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Tags the sidewalks with the road network within proximity.
     * @param {string} source_dataset_id Dataset from which the road network to be retrieved
     * @param {string} target_dataset_id Dataset for which the road network is to be tagged
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
     * @summary Downloads the OSW dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
     * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
     * @param {string} [file_version] The Latest version includes any recent modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
     * @summary List available OSW versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOswVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VersionList>>>;
    /**
     * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate confidence calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Updates the visibility preferences for a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter and modifies the dataset's visibility settings.
     * @summary Updates the visibility preferences for the dataset viewer.
     * @param {DatasetviewerTdeiDatasetIdBody} body
     * @param {string} tdei_dataset_id Dataset ID for updating the dataset viewer preferences.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewer(body: DatasetviewerTdeiDatasetIdBody, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Accepts the feedback from the dataset viewer. The feedback is stored in the system for further analysis and improvement of the dataset viewer experience.
     * @summary Accepts the feedback from the dataset viewer.
     * @param {ProjectIdTdeiDatasetIdBody} body
     * @param {string} project_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedback(body: ProjectIdTdeiDatasetIdBody, project_id: string, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>>;
    /**
     * Retrieves the feedbacks from the dataset viewer. Response includes a list of feedbacks provided by users regarding the dataset viewer. Each feedback contains details such as the dataset element ID, feedback text, customer email, and location information.
     * @summary Retrieves the feedbacks from the dataset viewer.
     * @param {string} tdei_project_group_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created after this date.
     * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created before this date.
     * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
     * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
     * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, defaults to 1. Filters feedbacks by retrieving results in pages.
     * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50, defaults to 10.Specifies total records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedbacks(tdei_project_group_id: string, tdei_dataset_id: string, from_date?: Date, to_date?: Date, sort_by?: string, sort_order?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Feedback>>>>;
    /**
     * Retrieves the feedbacks metadata. Response includes a summary of feedbacks such as total count, total overdue, and other relevant statistics.
     * @summary Retrieves the feedbacks metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedbacksMetadata(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FeedbackMetadata>>>>;
    /**
     * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary OSW dataset conversion on demand
     * @param {Blob} file
     * @param {string} source_format
     * @param {string} target_format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswOnDemandFormatForm(file: Blob, source_format: string, target_format: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate Intersection Quality metric calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a spatial join operation between two datasets within the TDEI system.
     * @param {OswSpatialjoinBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * This function merges spatial data from two datasets by unifying overlapping nodes, edges, and polygons into consolidated geometries. It identifies equivalent nodes based on proximity, aligns and merges overlapping edges, and combines adjacent polygons. The function outputs a single cohesive dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a union of the two input OSW datasets.
     * @param {OswUnionBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswUnion(body: OswUnionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Publishes the OSW dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
     * @summary Calculates the quality metric on a dataset element tags
     * @param {Blob} file
     * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>>;
    /**
     * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
     * @summary Upload a OSW dataset.
     * @param {Blob} dataset
     * @param {Blob} metadata
     * @param {Blob} changeset
     * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
     * @param {string} tdei_service_id TDEI service id associated with the above project group id.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Validates the osw dataset.
     * @param {Blob} dataset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
};
/**
 * OSWApi - factory interface
 * @export
 */
export declare const OSWApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Returns a subgraph dataset that falls within a specified bounding box
     * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
     * @param {string} file_type Dataset output file type.
     * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Adds the incline tag to the dataset
     * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Tags the sidewalks with the road network within proximity.
     * @param {string} source_dataset_id Dataset from which the road network to be retrieved
     * @param {string} target_dataset_id Dataset for which the road network is to be tagged
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
     * @summary Downloads the OSW dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
     * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
     * @param {string} [file_version] The Latest version includes any recent modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
     * @summary List available OSW versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOswVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<VersionList>>;
    /**
     * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate confidence calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Updates the visibility preferences for a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter and modifies the dataset's visibility settings.
     * @summary Updates the visibility preferences for the dataset viewer.
     * @param {DatasetviewerTdeiDatasetIdBody} body
     * @param {string} tdei_dataset_id Dataset ID for updating the dataset viewer preferences.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewer(body: DatasetviewerTdeiDatasetIdBody, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Accepts the feedback from the dataset viewer. The feedback is stored in the system for further analysis and improvement of the dataset viewer experience.
     * @summary Accepts the feedback from the dataset viewer.
     * @param {ProjectIdTdeiDatasetIdBody} body
     * @param {string} project_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedback(body: ProjectIdTdeiDatasetIdBody, project_id: string, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>>;
    /**
     * Retrieves the feedbacks from the dataset viewer. Response includes a list of feedbacks provided by users regarding the dataset viewer. Each feedback contains details such as the dataset element ID, feedback text, customer email, and location information.
     * @summary Retrieves the feedbacks from the dataset viewer.
     * @param {string} tdei_project_group_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created after this date.
     * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created before this date.
     * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
     * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
     * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, defaults to 1. Filters feedbacks by retrieving results in pages.
     * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50, defaults to 10.Specifies total records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedbacks(tdei_project_group_id: string, tdei_dataset_id: string, from_date?: Date, to_date?: Date, sort_by?: string, sort_order?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Feedback>>>;
    /**
     * Retrieves the feedbacks metadata. Response includes a summary of feedbacks such as total count, total overdue, and other relevant statistics.
     * @summary Retrieves the feedbacks metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswDatasetViewerFeedbacksMetadata(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FeedbackMetadata>>>;
    /**
     * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary OSW dataset conversion on demand
     * @param {Blob} file
     * @param {string} source_format
     * @param {string} target_format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswOnDemandFormatForm(file: Blob, source_format: string, target_format: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate Intersection Quality metric calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a spatial join operation between two datasets within the TDEI system.
     * @param {OswSpatialjoinBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * This function merges spatial data from two datasets by unifying overlapping nodes, edges, and polygons into consolidated geometries. It identifies equivalent nodes based on proximity, aligns and merges overlapping edges, and combines adjacent polygons. The function outputs a single cohesive dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a union of the two input OSW datasets.
     * @param {OswUnionBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oswUnion(body: OswUnionBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Publishes the OSW dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
     * @summary Calculates the quality metric on a dataset element tags
     * @param {Blob} file
     * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>>;
    /**
     * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
     * @summary Upload a OSW dataset.
     * @param {Blob} dataset
     * @param {Blob} metadata
     * @param {Blob} changeset
     * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
     * @param {string} tdei_service_id TDEI service id associated with the above project group id.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Validates the osw dataset.
     * @param {Blob} dataset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
};
/**
 * OSWApi - object-oriented interface
 * @export
 * @class OSWApi
 * @extends {BaseAPI}
 */
export declare class OSWApi extends BaseAPI {
    /**
     * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Returns a subgraph dataset that falls within a specified bounding box
     * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
     * @param {string} file_type Dataset output file type.
     * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Adds the incline tag to the dataset
     * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Tags the sidewalks with the road network within proximity.
     * @param {string} source_dataset_id Dataset from which the road network to be retrieved
     * @param {string} target_dataset_id Dataset for which the road network is to be tagged
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
     * @summary Downloads the OSW dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
     * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
     * @param {string} [file_version] The Latest version includes any recent modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
     * @summary List available OSW versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    listOswVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<VersionList>>;
    /**
     * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate confidence calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Updates the visibility preferences for a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter and modifies the dataset's visibility settings.
     * @summary Updates the visibility preferences for the dataset viewer.
     * @param {DatasetviewerTdeiDatasetIdBody} body
     * @param {string} tdei_dataset_id Dataset ID for updating the dataset viewer preferences.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswDatasetViewer(body: DatasetviewerTdeiDatasetIdBody, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Accepts the feedback from the dataset viewer. The feedback is stored in the system for further analysis and improvement of the dataset viewer experience.
     * @summary Accepts the feedback from the dataset viewer.
     * @param {ProjectIdTdeiDatasetIdBody} body
     * @param {string} project_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswDatasetViewerFeedback(body: ProjectIdTdeiDatasetIdBody, project_id: string, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>>;
    /**
     * Retrieves the feedbacks from the dataset viewer. Response includes a list of feedbacks provided by users regarding the dataset viewer. Each feedback contains details such as the dataset element ID, feedback text, customer email, and location information.
     * @summary Retrieves the feedbacks from the dataset viewer.
     * @param {string} tdei_project_group_id ID of the project group.
     * @param {string} tdei_dataset_id ID of the dataset.
     * @param {Date} [from_date] &lt;strong&gt;from_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created after this date.
     * @param {Date} [to_date] &lt;strong&gt;to_date:&lt;/strong&gt; Date in ISO 8601 format, filters feedbacks created before this date.
     * @param {string} [sort_by] &lt;strong&gt;sort_by:&lt;/strong&gt; String, defaults to &#x27;created_at&#x27;. Sorts feedbacks by the specified field.
     * @param {string} [sort_order] &lt;strong&gt;sort_order:&lt;/strong&gt; String, defaults to &#x27;desc&#x27;. Sorts feedbacks in ascending or descending order.
     * @param {number} [page_no] &lt;strong&gt;page_no:&lt;/strong&gt; Integer, defaults to 1. Filters feedbacks by retrieving results in pages.
     * @param {number} [page_size] &lt;strong&gt;Page size:&lt;/strong&gt; Integer, between 1 to 50, defaults to 10.Specifies total records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswDatasetViewerFeedbacks(tdei_project_group_id: string, tdei_dataset_id: string, from_date?: Date, to_date?: Date, sort_by?: string, sort_order?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Feedback>>>;
    /**
     * Retrieves the feedbacks metadata. Response includes a summary of feedbacks such as total count, total overdue, and other relevant statistics.
     * @summary Retrieves the feedbacks metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswDatasetViewerFeedbacksMetadata(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FeedbackMetadata>>>;
    /**
     * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary OSW dataset conversion on demand
     * @param {Blob} file
     * @param {string} source_format
     * @param {string} target_format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswOnDemandFormatForm(file: Blob, source_format: string, target_format: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate Intersection Quality metric calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a spatial join operation between two datasets within the TDEI system.
     * @param {OswSpatialjoinBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * This function merges spatial data from two datasets by unifying overlapping nodes, edges, and polygons into consolidated geometries. It identifies equivalent nodes based on proximity, aligns and merges overlapping edges, and combines adjacent polygons. The function outputs a single cohesive dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a union of the two input OSW datasets.
     * @param {OswUnionBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    oswUnion(body: OswUnionBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Publishes the OSW dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
     * @summary Calculates the quality metric on a dataset element tags
     * @param {Blob} file
     * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>>;
    /**
     * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
     * @summary Upload a OSW dataset.
     * @param {Blob} dataset
     * @param {Blob} metadata
     * @param {Blob} changeset
     * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
     * @param {string} tdei_service_id TDEI service id associated with the above project group id.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Validates the osw dataset.
     * @param {Blob} dataset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
}
