/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) system. It is intended for applications submitting data to and consuming data from the TDEI system. We currently support GTFS-Pathways, GTFS-Flex and OpenSidewalks (OSW) data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: tdei@uw.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { VersionList } from '../models';
/**
 * GTFSPathwaysApi - axios parameter creator
 * @export
 */
export const GTFSPathwaysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Download a specific GTFS Pathways dataset as zip containing .txt files that represent transit details.
         * @summary Downloads the GTFS Pathways dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsPathwaysFile: async (tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling getGtfsPathwaysFile.');
            }
            const localVarPath = `/api/v1/gtfs-pathways/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List of GTFS Pathways data standard versions supported by TDEI. The response includes a link to the GTFS Pathways data standard and specification.
         * @summary List available GTFS Pathways versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsPathwaysVersions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gtfs-pathways/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes an GTFS Pathways dataset that was previously uploaded via the [POST] /gtfs-pathways endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the GTFS Pathways dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishGtfsPathwaysFile: async (tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling publishGtfsPathwaysFile.');
            }
            const localVarPath = `/api/v1/gtfs-pathways/publish/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint enables users to upload a GTFS-Pathways dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the /publish endpoint.
         * @summary upload a pre-release of GTFS Pathways dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadGtfsPathwaysFileForm: async (dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling uploadGtfsPathwaysFileForm.');
            }
            // verify required parameter 'metadata' is not null or undefined
            if (metadata === null || metadata === undefined) {
                throw new RequiredError('metadata','Required parameter metadata was null or undefined when calling uploadGtfsPathwaysFileForm.');
            }
            // verify required parameter 'changeset' is not null or undefined
            if (changeset === null || changeset === undefined) {
                throw new RequiredError('changeset','Required parameter changeset was null or undefined when calling uploadGtfsPathwaysFileForm.');
            }
            // verify required parameter 'tdei_project_group_id' is not null or undefined
            if (tdei_project_group_id === null || tdei_project_group_id === undefined) {
                throw new RequiredError('tdei_project_group_id','Required parameter tdei_project_group_id was null or undefined when calling uploadGtfsPathwaysFileForm.');
            }
            // verify required parameter 'tdei_service_id' is not null or undefined
            if (tdei_service_id === null || tdei_service_id === undefined) {
                throw new RequiredError('tdei_service_id','Required parameter tdei_service_id was null or undefined when calling uploadGtfsPathwaysFileForm.');
            }
            const localVarPath = `/api/v1/gtfs-pathways/upload/{tdei_project_group_id}/{tdei_service_id}`
                .replace(`{${"tdei_project_group_id"}}`, encodeURIComponent(String(tdei_project_group_id)))
                .replace(`{${"tdei_service_id"}}`, encodeURIComponent(String(tdei_service_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (derived_from_dataset_id !== undefined) {
                localVarQueryParameter['derived_from_dataset_id'] = derived_from_dataset_id;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', metadata as any);
            }

            if (changeset !== undefined) { 
                localVarFormParams.append('changeset', changeset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to validate GTFS Pathways dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the GTFS Pathways dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateGtfsPathwaysFileForm: async (dataset: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling validateGtfsPathwaysFileForm.');
            }
            const localVarPath = `/api/v1/gtfs-pathways/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GTFSPathwaysApi - functional programming interface
 * @export
 */
export const GTFSPathwaysApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Download a specific GTFS Pathways dataset as zip containing .txt files that represent transit details.
         * @summary Downloads the GTFS Pathways dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtfsPathwaysFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GTFSPathwaysApiAxiosParamCreator(configuration).getGtfsPathwaysFile(tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List of GTFS Pathways data standard versions supported by TDEI. The response includes a link to the GTFS Pathways data standard and specification.
         * @summary List available GTFS Pathways versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsPathwaysVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VersionList>>> {
            const localVarAxiosArgs = await GTFSPathwaysApiAxiosParamCreator(configuration).listGtfsPathwaysVersions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes an GTFS Pathways dataset that was previously uploaded via the [POST] /gtfs-pathways endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the GTFS Pathways dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishGtfsPathwaysFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await GTFSPathwaysApiAxiosParamCreator(configuration).publishGtfsPathwaysFile(tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint enables users to upload a GTFS-Pathways dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the /publish endpoint.
         * @summary upload a pre-release of GTFS Pathways dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadGtfsPathwaysFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await GTFSPathwaysApiAxiosParamCreator(configuration).uploadGtfsPathwaysFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows a user to validate GTFS Pathways dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the GTFS Pathways dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateGtfsPathwaysFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await GTFSPathwaysApiAxiosParamCreator(configuration).validateGtfsPathwaysFileForm(dataset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GTFSPathwaysApi - factory interface
 * @export
 */
export const GTFSPathwaysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Download a specific GTFS Pathways dataset as zip containing .txt files that represent transit details.
         * @summary Downloads the GTFS Pathways dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtfsPathwaysFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GTFSPathwaysApiFp(configuration).getGtfsPathwaysFile(tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of GTFS Pathways data standard versions supported by TDEI. The response includes a link to the GTFS Pathways data standard and specification.
         * @summary List available GTFS Pathways versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsPathwaysVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<VersionList>> {
            return GTFSPathwaysApiFp(configuration).listGtfsPathwaysVersions(options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes an GTFS Pathways dataset that was previously uploaded via the [POST] /gtfs-pathways endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the GTFS Pathways dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishGtfsPathwaysFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return GTFSPathwaysApiFp(configuration).publishGtfsPathwaysFile(tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint enables users to upload a GTFS-Pathways dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the /publish endpoint.
         * @summary upload a pre-release of GTFS Pathways dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadGtfsPathwaysFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return GTFSPathwaysApiFp(configuration).uploadGtfsPathwaysFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to validate GTFS Pathways dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the GTFS Pathways dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateGtfsPathwaysFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return GTFSPathwaysApiFp(configuration).validateGtfsPathwaysFileForm(dataset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GTFSPathwaysApi - object-oriented interface
 * @export
 * @class GTFSPathwaysApi
 * @extends {BaseAPI}
 */
export class GTFSPathwaysApi extends BaseAPI {
    /**
     * Download a specific GTFS Pathways dataset as zip containing .txt files that represent transit details.
     * @summary Downloads the GTFS Pathways dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSPathwaysApi
     */
    public async getGtfsPathwaysFile(tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GTFSPathwaysApiFp(this.configuration).getGtfsPathwaysFile(tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List of GTFS Pathways data standard versions supported by TDEI. The response includes a link to the GTFS Pathways data standard and specification.
     * @summary List available GTFS Pathways versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSPathwaysApi
     */
    public async listGtfsPathwaysVersions(options?: AxiosRequestConfig) : Promise<AxiosResponse<VersionList>> {
        return GTFSPathwaysApiFp(this.configuration).listGtfsPathwaysVersions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publishes an GTFS Pathways dataset that was previously uploaded via the [POST] /gtfs-pathways endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Publishes the GTFS Pathways dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id Dataset id of the dataset to be published.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSPathwaysApi
     */
    public async publishGtfsPathwaysFile(tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return GTFSPathwaysApiFp(this.configuration).publishGtfsPathwaysFile(tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint enables users to upload a GTFS-Pathways dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the /publish endpoint.
     * @summary upload a pre-release of GTFS Pathways dataset.
     * @param {Blob} dataset 
     * @param {Blob} metadata 
     * @param {Blob} changeset 
     * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
     * @param {string} tdei_service_id TDEI service id associated with the above project group id.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSPathwaysApi
     */
    public async uploadGtfsPathwaysFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return GTFSPathwaysApiFp(this.configuration).uploadGtfsPathwaysFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user to validate GTFS Pathways dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Validates the GTFS Pathways dataset.
     * @param {Blob} dataset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSPathwaysApi
     */
    public async validateGtfsPathwaysFileForm(dataset: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return GTFSPathwaysApiFp(this.configuration).validateGtfsPathwaysFileForm(dataset, options).then((request) => request(this.axios, this.basePath));
    }
}
