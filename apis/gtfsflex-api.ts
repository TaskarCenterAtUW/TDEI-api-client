/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway API
 * This is an API for publishing data to the Transportation Data Equity Initiative (TDEI) data system. This API is intended for applications producing data for and consuming data from the TDEI system. This API supports publishing of GTFS-Pathways, GTFS-Flex v2 and OpenSidewalks data to the TDEI.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GtfsFlexDownload } from '../models';
import { GtfsFlexServiceModel } from '../models';
import { GtfsFlexUpload } from '../models';
import { VersionList } from '../models';
/**
 * GTFSFlexApi - axios parameter creator
 * @export
 */
export const GTFSFlexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * returns a specific gtfs_flex file identified by the tdei_record_id
         * @summary returns a gtfs_flex file
         * @param {string} tdeiRecordId tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlexFile: async (tdeiRecordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdeiRecordId' is not null or undefined
            if (tdeiRecordId === null || tdeiRecordId === undefined) {
                throw new RequiredError('tdeiRecordId','Required parameter tdeiRecordId was null or undefined when calling getFlexFile.');
            }
            const localVarPath = `/api/v1/gtfs-flex/{tdei_record_id}`
                .replace(`{${"tdei_record_id"}}`, encodeURIComponent(String(tdeiRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a json list of all gtfs flex files stored in the TDEI system that meet the specified criteria. Criteria that can be specified include: polygon (bounding box), minimum confidence level, flex version, date time and organization id.  This endpoint can be used by an application developer to obtain a list of gtfs flex files in the TDEI system meeting the specified criteria. This endpoint returns a list of file-metadata including the uris of the file, which can be used to fetch the files themselves.
         * @summary List flex files meeting specified criteria.
         * @param {string} [tdeiServiceId] Id of the flex service.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [flexSchemaVersion] version name of the flex schema version that the application requests. list of versions can be found with /api/v1/gtfs-flex/versions.
         * @param {string} [tdeiOrgId] tdei-assigned organization id. Represented as a UUID.
         * @param {string} [dateTime] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdeiRecordId] if included, returns the metadata for the specified file, all other parameters will be ignored.
         * @param {number} [pageNo] Integer, defaults to 1.
         * @param {number} [pageSize] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexFiles: async (tdeiServiceId?: string, bbox?: Array<number>, flexSchemaVersion?: string, tdeiOrgId?: string, dateTime?: string, tdeiRecordId?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gtfs-flex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tdeiServiceId !== undefined) {
                localVarQueryParameter['tdei_service_id'] = tdeiServiceId;
            }

            if (bbox) {
                localVarQueryParameter['bbox'] = bbox;
            }

            if (flexSchemaVersion !== undefined) {
                localVarQueryParameter['flex_schema_version'] = flexSchemaVersion;
            }

            if (tdeiOrgId !== undefined) {
                localVarQueryParameter[' tdei_org_id'] = tdeiOrgId;
            }

            if (dateTime !== undefined) {
                localVarQueryParameter['date_time'] = dateTime;
            }

            if (tdeiRecordId !== undefined) {
                localVarQueryParameter['tdei_record_id'] = tdeiRecordId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Path used to retrieve the list of GTFS Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_org_id param is used, will return services for that organization.
         * @summary List GTFS Flex Services
         * @param {string} [tdeiOrgId] A tdei-assigned id for an organization. org_ids can be retrieved using the path /api/v1/organizations.
         * @param {number} [pageNo] Integer, defaults to 1.
         * @param {number} [pageSize] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexServices: async (tdeiOrgId?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gtfs-flex/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tdeiOrgId !== undefined) {
                localVarQueryParameter['tdei_org_id'] = tdeiOrgId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List GTFS flex versions supported by TDEI.  Returns a json list of the GTFS flex versions supported by TDEI.
         * @summary List available GTFS flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexVersions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gtfs-flex/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This call allows a user to upload or create a new gtfs flex file. The caller must provide metadata about the file. Required metadata includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a new gtfs_flex file
         * @param {GtfsFlexUpload} meta 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadGtfsFlexFileForm: async (meta: GtfsFlexUpload, file: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meta' is not null or undefined
            if (meta === null || meta === undefined) {
                throw new RequiredError('meta','Required parameter meta was null or undefined when calling uploadGtfsFlexFileForm.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling uploadGtfsFlexFileForm.');
            }
            const localVarPath = `/api/v1/gtfs-flex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (meta !== undefined) { 
                localVarFormParams.append('meta', meta as any);
            }

            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GTFSFlexApi - functional programming interface
 * @export
 */
export const GTFSFlexApiFp = function(configuration?: Configuration) {
    return {
        /**
         * returns a specific gtfs_flex file identified by the tdei_record_id
         * @summary returns a gtfs_flex file
         * @param {string} tdeiRecordId tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlexFile(tdeiRecordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).getFlexFile(tdeiRecordId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns a json list of all gtfs flex files stored in the TDEI system that meet the specified criteria. Criteria that can be specified include: polygon (bounding box), minimum confidence level, flex version, date time and organization id.  This endpoint can be used by an application developer to obtain a list of gtfs flex files in the TDEI system meeting the specified criteria. This endpoint returns a list of file-metadata including the uris of the file, which can be used to fetch the files themselves.
         * @summary List flex files meeting specified criteria.
         * @param {string} [tdeiServiceId] Id of the flex service.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [flexSchemaVersion] version name of the flex schema version that the application requests. list of versions can be found with /api/v1/gtfs-flex/versions.
         * @param {string} [tdeiOrgId] tdei-assigned organization id. Represented as a UUID.
         * @param {string} [dateTime] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdeiRecordId] if included, returns the metadata for the specified file, all other parameters will be ignored.
         * @param {number} [pageNo] Integer, defaults to 1.
         * @param {number} [pageSize] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFlexFiles(tdeiServiceId?: string, bbox?: Array<number>, flexSchemaVersion?: string, tdeiOrgId?: string, dateTime?: string, tdeiRecordId?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GtfsFlexDownload>>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).listFlexFiles(tdeiServiceId, bbox, flexSchemaVersion, tdeiOrgId, dateTime, tdeiRecordId, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Path used to retrieve the list of GTFS Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_org_id param is used, will return services for that organization.
         * @summary List GTFS Flex Services
         * @param {string} [tdeiOrgId] A tdei-assigned id for an organization. org_ids can be retrieved using the path /api/v1/organizations.
         * @param {number} [pageNo] Integer, defaults to 1.
         * @param {number} [pageSize] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFlexServices(tdeiOrgId?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GtfsFlexServiceModel>>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).listFlexServices(tdeiOrgId, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List GTFS flex versions supported by TDEI.  Returns a json list of the GTFS flex versions supported by TDEI.
         * @summary List available GTFS flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFlexVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VersionList>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).listFlexVersions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This call allows a user to upload or create a new gtfs flex file. The caller must provide metadata about the file. Required metadata includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a new gtfs_flex file
         * @param {GtfsFlexUpload} meta 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadGtfsFlexFileForm(meta: GtfsFlexUpload, file: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).uploadGtfsFlexFileForm(meta, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GTFSFlexApi - factory interface
 * @export
 */
export const GTFSFlexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * returns a specific gtfs_flex file identified by the tdei_record_id
         * @summary returns a gtfs_flex file
         * @param {string} tdeiRecordId tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlexFile(tdeiRecordId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GTFSFlexApiFp(configuration).getFlexFile(tdeiRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a json list of all gtfs flex files stored in the TDEI system that meet the specified criteria. Criteria that can be specified include: polygon (bounding box), minimum confidence level, flex version, date time and organization id.  This endpoint can be used by an application developer to obtain a list of gtfs flex files in the TDEI system meeting the specified criteria. This endpoint returns a list of file-metadata including the uris of the file, which can be used to fetch the files themselves.
         * @summary List flex files meeting specified criteria.
         * @param {string} [tdeiServiceId] Id of the flex service.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [flexSchemaVersion] version name of the flex schema version that the application requests. list of versions can be found with /api/v1/gtfs-flex/versions.
         * @param {string} [tdeiOrgId] tdei-assigned organization id. Represented as a UUID.
         * @param {string} [dateTime] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdeiRecordId] if included, returns the metadata for the specified file, all other parameters will be ignored.
         * @param {number} [pageNo] Integer, defaults to 1.
         * @param {number} [pageSize] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFlexFiles(tdeiServiceId?: string, bbox?: Array<number>, flexSchemaVersion?: string, tdeiOrgId?: string, dateTime?: string, tdeiRecordId?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GtfsFlexDownload>>> {
            return GTFSFlexApiFp(configuration).listFlexFiles(tdeiServiceId, bbox, flexSchemaVersion, tdeiOrgId, dateTime, tdeiRecordId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Path used to retrieve the list of GTFS Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_org_id param is used, will return services for that organization.
         * @summary List GTFS Flex Services
         * @param {string} [tdeiOrgId] A tdei-assigned id for an organization. org_ids can be retrieved using the path /api/v1/organizations.
         * @param {number} [pageNo] Integer, defaults to 1.
         * @param {number} [pageSize] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFlexServices(tdeiOrgId?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GtfsFlexServiceModel>>> {
            return GTFSFlexApiFp(configuration).listFlexServices(tdeiOrgId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * List GTFS flex versions supported by TDEI.  Returns a json list of the GTFS flex versions supported by TDEI.
         * @summary List available GTFS flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFlexVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<VersionList>> {
            return GTFSFlexApiFp(configuration).listFlexVersions(options).then((request) => request(axios, basePath));
        },
        /**
         * This call allows a user to upload or create a new gtfs flex file. The caller must provide metadata about the file. Required metadata includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a new gtfs_flex file
         * @param {GtfsFlexUpload} meta 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadGtfsFlexFileForm(meta: GtfsFlexUpload, file: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return GTFSFlexApiFp(configuration).uploadGtfsFlexFileForm(meta, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GTFSFlexApi - object-oriented interface
 * @export
 * @class GTFSFlexApi
 * @extends {BaseAPI}
 */
export class GTFSFlexApi extends BaseAPI {
    /**
     * returns a specific gtfs_flex file identified by the tdei_record_id
     * @summary returns a gtfs_flex file
     * @param {string} tdeiRecordId tdei_record_id for a file, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async getFlexFile(tdeiRecordId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GTFSFlexApiFp(this.configuration).getFlexFile(tdeiRecordId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a json list of all gtfs flex files stored in the TDEI system that meet the specified criteria. Criteria that can be specified include: polygon (bounding box), minimum confidence level, flex version, date time and organization id.  This endpoint can be used by an application developer to obtain a list of gtfs flex files in the TDEI system meeting the specified criteria. This endpoint returns a list of file-metadata including the uris of the file, which can be used to fetch the files themselves.
     * @summary List flex files meeting specified criteria.
     * @param {string} [tdeiServiceId] Id of the flex service.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [flexSchemaVersion] version name of the flex schema version that the application requests. list of versions can be found with /api/v1/gtfs-flex/versions.
     * @param {string} [tdeiOrgId] tdei-assigned organization id. Represented as a UUID.
     * @param {string} [dateTime] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
     * @param {string} [tdeiRecordId] if included, returns the metadata for the specified file, all other parameters will be ignored.
     * @param {number} [pageNo] Integer, defaults to 1.
     * @param {number} [pageSize] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async listFlexFiles(tdeiServiceId?: string, bbox?: Array<number>, flexSchemaVersion?: string, tdeiOrgId?: string, dateTime?: string, tdeiRecordId?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GtfsFlexDownload>>> {
        return GTFSFlexApiFp(this.configuration).listFlexFiles(tdeiServiceId, bbox, flexSchemaVersion, tdeiOrgId, dateTime, tdeiRecordId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Path used to retrieve the list of GTFS Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_org_id param is used, will return services for that organization.
     * @summary List GTFS Flex Services
     * @param {string} [tdeiOrgId] A tdei-assigned id for an organization. org_ids can be retrieved using the path /api/v1/organizations.
     * @param {number} [pageNo] Integer, defaults to 1.
     * @param {number} [pageSize] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async listFlexServices(tdeiOrgId?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GtfsFlexServiceModel>>> {
        return GTFSFlexApiFp(this.configuration).listFlexServices(tdeiOrgId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List GTFS flex versions supported by TDEI.  Returns a json list of the GTFS flex versions supported by TDEI.
     * @summary List available GTFS flex versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async listFlexVersions(options?: AxiosRequestConfig) : Promise<AxiosResponse<VersionList>> {
        return GTFSFlexApiFp(this.configuration).listFlexVersions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This call allows a user to upload or create a new gtfs flex file. The caller must provide metadata about the file. Required metadata includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
     * @summary upload a new gtfs_flex file
     * @param {GtfsFlexUpload} meta 
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async uploadGtfsFlexFileForm(meta: GtfsFlexUpload, file: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return GTFSFlexApiFp(this.configuration).uploadGtfsFlexFileForm(meta, file, options).then((request) => request(this.axios, this.basePath));
    }
}
