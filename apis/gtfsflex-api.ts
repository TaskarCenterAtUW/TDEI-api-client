/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) data system. It is intended for applications producing data to and consuming data from the TDEI system. It currently supports GTFS-Pathways, GTFS-Flex v2 and OpenSidewalks v0.2 data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: tdei@uw.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { VersionList } from '../models';
/**
 * GTFSFlexApi - axios parameter creator
 * @export
 */
export const GTFSFlexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * returns a specific GTFS Flex file as zip containing metadata, dataset, and changeset identified by the tdei_record_id
         * @summary downloads the GTFS Flex files as zip
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsFlexFile: async (tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling getGtfsFlexFile.');
            }
            const localVarPath = `/api/v1/gtfs-flex/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the versions of GTFS Flex data which are supported by TDEI.
         * @summary List available GTFS Flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsFlexVersions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gtfs-flex/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes an GTFS Flex dataset that was previously uploaded via the [POST] /gtfs-flex endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Publishes the GTFS Flex dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishGtfsFlexFile: async (tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling publishGtfsFlexFile.');
            }
            const localVarPath = `/api/v1/gtfs-flex/publish/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This path allows a user to upload pre-release GTFS Flex dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary upload a pre-release of GTFS Flex dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadGtfsFlexFileForm: async (dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling uploadGtfsFlexFileForm.');
            }
            // verify required parameter 'metadata' is not null or undefined
            if (metadata === null || metadata === undefined) {
                throw new RequiredError('metadata','Required parameter metadata was null or undefined when calling uploadGtfsFlexFileForm.');
            }
            // verify required parameter 'changeset' is not null or undefined
            if (changeset === null || changeset === undefined) {
                throw new RequiredError('changeset','Required parameter changeset was null or undefined when calling uploadGtfsFlexFileForm.');
            }
            // verify required parameter 'tdei_project_group_id' is not null or undefined
            if (tdei_project_group_id === null || tdei_project_group_id === undefined) {
                throw new RequiredError('tdei_project_group_id','Required parameter tdei_project_group_id was null or undefined when calling uploadGtfsFlexFileForm.');
            }
            // verify required parameter 'tdei_service_id' is not null or undefined
            if (tdei_service_id === null || tdei_service_id === undefined) {
                throw new RequiredError('tdei_service_id','Required parameter tdei_service_id was null or undefined when calling uploadGtfsFlexFileForm.');
            }
            const localVarPath = `/api/v1/gtfs-flex/upload/{tdei_project_group_id}/{tdei_service_id}`
                .replace(`{${"tdei_project_group_id"}}`, encodeURIComponent(String(tdei_project_group_id)))
                .replace(`{${"tdei_service_id"}}`, encodeURIComponent(String(tdei_service_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (derived_from_dataset_id !== undefined) {
                localVarQueryParameter['derived_from_dataset_id'] = derived_from_dataset_id;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', metadata as any);
            }

            if (changeset !== undefined) { 
                localVarFormParams.append('changeset', changeset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to validate GTFS Flex dataset to check the correctness of data. Returns the job_id for validation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Validates the GTFS Flex dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateGtfsFlexFileForm: async (dataset: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling validateGtfsFlexFileForm.');
            }
            const localVarPath = `/api/v1/gtfs-flex/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GTFSFlexApi - functional programming interface
 * @export
 */
export const GTFSFlexApiFp = function(configuration?: Configuration) {
    return {
        /**
         * returns a specific GTFS Flex file as zip containing metadata, dataset, and changeset identified by the tdei_record_id
         * @summary downloads the GTFS Flex files as zip
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtfsFlexFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).getGtfsFlexFile(tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists the versions of GTFS Flex data which are supported by TDEI.
         * @summary List available GTFS Flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsFlexVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VersionList>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).listGtfsFlexVersions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes an GTFS Flex dataset that was previously uploaded via the [POST] /gtfs-flex endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Publishes the GTFS Flex dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishGtfsFlexFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).publishGtfsFlexFile(tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This path allows a user to upload pre-release GTFS Flex dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary upload a pre-release of GTFS Flex dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadGtfsFlexFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).uploadGtfsFlexFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows a user to validate GTFS Flex dataset to check the correctness of data. Returns the job_id for validation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Validates the GTFS Flex dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateGtfsFlexFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await GTFSFlexApiAxiosParamCreator(configuration).validateGtfsFlexFileForm(dataset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GTFSFlexApi - factory interface
 * @export
 */
export const GTFSFlexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * returns a specific GTFS Flex file as zip containing metadata, dataset, and changeset identified by the tdei_record_id
         * @summary downloads the GTFS Flex files as zip
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtfsFlexFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GTFSFlexApiFp(configuration).getGtfsFlexFile(tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the versions of GTFS Flex data which are supported by TDEI.
         * @summary List available GTFS Flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsFlexVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<VersionList>> {
            return GTFSFlexApiFp(configuration).listGtfsFlexVersions(options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes an GTFS Flex dataset that was previously uploaded via the [POST] /gtfs-flex endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Publishes the GTFS Flex dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishGtfsFlexFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return GTFSFlexApiFp(configuration).publishGtfsFlexFile(tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * This path allows a user to upload pre-release GTFS Flex dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary upload a pre-release of GTFS Flex dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadGtfsFlexFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return GTFSFlexApiFp(configuration).uploadGtfsFlexFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to validate GTFS Flex dataset to check the correctness of data. Returns the job_id for validation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Validates the GTFS Flex dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateGtfsFlexFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return GTFSFlexApiFp(configuration).validateGtfsFlexFileForm(dataset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GTFSFlexApi - object-oriented interface
 * @export
 * @class GTFSFlexApi
 * @extends {BaseAPI}
 */
export class GTFSFlexApi extends BaseAPI {
    /**
     * returns a specific GTFS Flex file as zip containing metadata, dataset, and changeset identified by the tdei_record_id
     * @summary downloads the GTFS Flex files as zip
     * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async getGtfsFlexFile(tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GTFSFlexApiFp(this.configuration).getGtfsFlexFile(tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the versions of GTFS Flex data which are supported by TDEI.
     * @summary List available GTFS Flex versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async listGtfsFlexVersions(options?: AxiosRequestConfig) : Promise<AxiosResponse<VersionList>> {
        return GTFSFlexApiFp(this.configuration).listGtfsFlexVersions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publishes an GTFS Flex dataset that was previously uploaded via the [POST] /gtfs-flex endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary Publishes the GTFS Flex dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async publishGtfsFlexFile(tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return GTFSFlexApiFp(this.configuration).publishGtfsFlexFile(tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This path allows a user to upload pre-release GTFS Flex dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary upload a pre-release of GTFS Flex dataset.
     * @param {Blob} dataset 
     * @param {Blob} metadata 
     * @param {Blob} changeset 
     * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
     * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async uploadGtfsFlexFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return GTFSFlexApiFp(this.configuration).uploadGtfsFlexFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user to validate GTFS Flex dataset to check the correctness of data. Returns the job_id for validation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary Validates the GTFS Flex dataset.
     * @param {Blob} dataset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    public async validateGtfsFlexFileForm(dataset: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return GTFSFlexApiFp(this.configuration).validateGtfsFlexFileForm(dataset, options).then((request) => request(this.axios, this.basePath));
    }
}
