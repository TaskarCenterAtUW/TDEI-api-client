/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) data system. It is intended for applications producing data to and consuming data from the TDEI system. It currently supports GTFS-Pathways, GTFS-Flex v2 and OpenSidewalks v0.2 data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: tdei@uw.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { OswSpatialjoinBody } from '../models';
import { QualityMetricTagResponse } from '../models';
import { VersionList } from '../models';
/**
 * OSWApi - axios parameter creator
 * @export
 */
export const OSWApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Given a dataset tdei_dataset_id returns the subgraph within a given bounding box (xmin, ymin, ymax, xmax). Returns the job_id for convert request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Given a dataset tdei_dataset_id returns the subgraph within a given bounding box.
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {string} file_type Output file type for a file
         * @param {Array<number>} bbox A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetBbox: async (tdei_dataset_id: string, file_type: string, bbox: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling datasetBbox.');
            }
            // verify required parameter 'file_type' is not null or undefined
            if (file_type === null || file_type === undefined) {
                throw new RequiredError('file_type','Required parameter file_type was null or undefined when calling datasetBbox.');
            }
            // verify required parameter 'bbox' is not null or undefined
            if (bbox === null || bbox === undefined) {
                throw new RequiredError('bbox','Required parameter bbox was null or undefined when calling datasetBbox.');
            }
            const localVarPath = `/api/v1/osw/dataset-bbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tdei_dataset_id !== undefined) {
                localVarQueryParameter['tdei_dataset_id'] = tdei_dataset_id;
            }

            if (file_type !== undefined) {
                localVarQueryParameter['file_type'] = file_type;
            }

            if (bbox) {
                localVarQueryParameter['bbox'] = bbox;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds the \"incline\" tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag. Returns the job_id for the incline calculation request.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a dataset, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagIncline: async (tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling datasetTagIncline.');
            }
            const localVarPath = `/api/v1/osw/dataset-inclination/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a target dataset, tags the sidewalks with the road network from source dataset which is within the buffer of 5 meters from the sidewalk.
         * @summary Given a target dataset, tags the sidewalks with the road network from source dataset.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagRoad: async (source_dataset_id: string, target_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'source_dataset_id' is not null or undefined
            if (source_dataset_id === null || source_dataset_id === undefined) {
                throw new RequiredError('source_dataset_id','Required parameter source_dataset_id was null or undefined when calling datasetTagRoad.');
            }
            // verify required parameter 'target_dataset_id' is not null or undefined
            if (target_dataset_id === null || target_dataset_id === undefined) {
                throw new RequiredError('target_dataset_id','Required parameter target_dataset_id was null or undefined when calling datasetTagRoad.');
            }
            const localVarPath = `/api/v1/osw/dataset-tag-road`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (source_dataset_id !== undefined) {
                localVarQueryParameter['source_dataset_id'] = source_dataset_id;
            }

            if (target_dataset_id !== undefined) {
                localVarQueryParameter['target_dataset_id'] = target_dataset_id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * returns a specific osw file as zip containing metadata, dataset, and changeset identified by the tdei_dataset_id
         * @summary downloads the OSW files as zip
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {string} [format] File format to download. Default to osw
         * @param {string} [file_version] File version to download. Default to latest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOswFile: async (tdei_dataset_id: string, format?: string, file_version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling getOswFile.');
            }
            const localVarPath = `/api/v1/osw/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (file_version !== undefined) {
                localVarQueryParameter['file_version'] = file_version;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the versions of OSW data which are supported by TDEI.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOswVersions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/osw/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions. Returns the job_id for confidence calculation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Initiate Confidence calculation for a dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswConfidenceCalculateForm: async (tdei_dataset_id: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling oswConfidenceCalculateForm.');
            }
            const localVarPath = `/api/v1/osw/confidence/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * upload a file and request for file format conversion. Returns the job_id for convert request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary OSW reformatting on demand
         * @param {string} source 
         * @param {string} target 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswOnDemandFormatForm: async (source: string, target: string, file: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'source' is not null or undefined
            if (source === null || source === undefined) {
                throw new RequiredError('source','Required parameter source was null or undefined when calling oswOnDemandFormatForm.');
            }
            // verify required parameter 'target' is not null or undefined
            if (target === null || target === undefined) {
                throw new RequiredError('target','Required parameter target was null or undefined when calling oswOnDemandFormatForm.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling oswOnDemandFormatForm.');
            }
            const localVarPath = `/api/v1/osw/convert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (source !== undefined) { 
                localVarFormParams.append('source', source as any);
            }

            if (target !== undefined) { 
                localVarFormParams.append('target', target as any);
            }

            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the Intersection Quality calculation for requested tdei_dataset_id with optional intersection polygon file. Returns the job_id for quality metric calculation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswQualityCalculateForm: async (tdei_dataset_id: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling oswQualityCalculateForm.');
            }
            const localVarPath = `/api/v1/osw/quality-metric/ixn/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Executes a spatial join operation on the OSW dataset. Based on the provided spatial join input parameters, the system runs the query and generates a downloadable dataset. Returns the job_id for the spatial join request. The geometry column for data elements is specified as `geometry_target` and `geometry_source`. To check the status, refer to the Location header in the response, which includes the URL for the status API endpoint.
         * @summary Performs the spatial join operation on the OSW dataset.
         * @param {OswSpatialjoinBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswSpatialJoin: async (body: OswSpatialjoinBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oswSpatialJoin.');
            }
            const localVarPath = `/api/v1/osw/spatial-join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishOswFile: async (tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling publishOswFile.');
            }
            const localVarPath = `/api/v1/osw/publish/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file 
         * @param {string} tdei_dataset_id tdei_dataset_id for a dataset, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityMetricTagForm: async (file: Blob, tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling qualityMetricTagForm.');
            }
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling qualityMetricTagForm.');
            }
            const localVarPath = `/api/v1/osw/quality-metric/tag/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This path allows a user to upload pre-release osw dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary upload a pre-release of OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOswFileForm: async (dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'metadata' is not null or undefined
            if (metadata === null || metadata === undefined) {
                throw new RequiredError('metadata','Required parameter metadata was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'changeset' is not null or undefined
            if (changeset === null || changeset === undefined) {
                throw new RequiredError('changeset','Required parameter changeset was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'tdei_project_group_id' is not null or undefined
            if (tdei_project_group_id === null || tdei_project_group_id === undefined) {
                throw new RequiredError('tdei_project_group_id','Required parameter tdei_project_group_id was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'tdei_service_id' is not null or undefined
            if (tdei_service_id === null || tdei_service_id === undefined) {
                throw new RequiredError('tdei_service_id','Required parameter tdei_service_id was null or undefined when calling uploadOswFileForm.');
            }
            const localVarPath = `/api/v1/osw/upload/{tdei_project_group_id}/{tdei_service_id}`
                .replace(`{${"tdei_project_group_id"}}`, encodeURIComponent(String(tdei_project_group_id)))
                .replace(`{${"tdei_service_id"}}`, encodeURIComponent(String(tdei_service_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (derived_from_dataset_id !== undefined) {
                localVarQueryParameter['derived_from_dataset_id'] = derived_from_dataset_id;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', metadata as any);
            }

            if (changeset !== undefined) { 
                localVarFormParams.append('changeset', changeset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. Returns the job_id for validation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOswFileForm: async (dataset: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling validateOswFileForm.');
            }
            const localVarPath = `/api/v1/osw/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OSWApi - functional programming interface
 * @export
 */
export const OSWApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Given a dataset tdei_dataset_id returns the subgraph within a given bounding box (xmin, ymin, ymax, xmax). Returns the job_id for convert request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Given a dataset tdei_dataset_id returns the subgraph within a given bounding box.
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {string} file_type Output file type for a file
         * @param {Array<number>} bbox A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds the \"incline\" tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag. Returns the job_id for the incline calculation request.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a dataset, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).datasetTagIncline(tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Given a target dataset, tags the sidewalks with the road network from source dataset which is within the buffer of 5 meters from the sidewalk.
         * @summary Given a target dataset, tags the sidewalks with the road network from source dataset.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * returns a specific osw file as zip containing metadata, dataset, and changeset identified by the tdei_dataset_id
         * @summary downloads the OSW files as zip
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {string} [format] File format to download. Default to osw
         * @param {string} [file_version] File version to download. Default to latest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).getOswFile(tdei_dataset_id, format, file_version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists the versions of OSW data which are supported by TDEI.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOswVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VersionList>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).listOswVersions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions. Returns the job_id for confidence calculation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Initiate Confidence calculation for a dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * upload a file and request for file format conversion. Returns the job_id for convert request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary OSW reformatting on demand
         * @param {string} source 
         * @param {string} target 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswOnDemandFormatForm(source: string, target: string, file: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswOnDemandFormatForm(source, target, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Initiates the Intersection Quality calculation for requested tdei_dataset_id with optional intersection polygon file. Returns the job_id for quality metric calculation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswQualityCalculateForm(tdei_dataset_id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Executes a spatial join operation on the OSW dataset. Based on the provided spatial join input parameters, the system runs the query and generates a downloadable dataset. Returns the job_id for the spatial join request. The geometry column for data elements is specified as `geometry_target` and `geometry_source`. To check the status, refer to the Location header in the response, which includes the URL for the status API endpoint.
         * @summary Performs the spatial join operation on the OSW dataset.
         * @param {OswSpatialjoinBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswSpatialJoin(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).publishOswFile(tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file 
         * @param {string} tdei_dataset_id tdei_dataset_id for a dataset, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).qualityMetricTagForm(file, tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This path allows a user to upload pre-release osw dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary upload a pre-release of OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. Returns the job_id for validation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).validateOswFileForm(dataset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OSWApi - factory interface
 * @export
 */
export const OSWApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Given a dataset tdei_dataset_id returns the subgraph within a given bounding box (xmin, ymin, ymax, xmax). Returns the job_id for convert request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Given a dataset tdei_dataset_id returns the subgraph within a given bounding box.
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {string} file_type Output file type for a file
         * @param {Array<number>} bbox A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds the \"incline\" tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag. Returns the job_id for the incline calculation request.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a dataset, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).datasetTagIncline(tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a target dataset, tags the sidewalks with the road network from source dataset which is within the buffer of 5 meters from the sidewalk.
         * @summary Given a target dataset, tags the sidewalks with the road network from source dataset.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * returns a specific osw file as zip containing metadata, dataset, and changeset identified by the tdei_dataset_id
         * @summary downloads the OSW files as zip
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {string} [format] File format to download. Default to osw
         * @param {string} [file_version] File version to download. Default to latest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OSWApiFp(configuration).getOswFile(tdei_dataset_id, format, file_version, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the versions of OSW data which are supported by TDEI.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOswVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<VersionList>> {
            return OSWApiFp(configuration).listOswVersions(options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions. Returns the job_id for confidence calculation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Initiate Confidence calculation for a dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * upload a file and request for file format conversion. Returns the job_id for convert request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary OSW reformatting on demand
         * @param {string} source 
         * @param {string} target 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswOnDemandFormatForm(source: string, target: string, file: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswOnDemandFormatForm(source, target, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the Intersection Quality calculation for requested tdei_dataset_id with optional intersection polygon file. Returns the job_id for quality metric calculation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswQualityCalculateForm(tdei_dataset_id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Executes a spatial join operation on the OSW dataset. Based on the provided spatial join input parameters, the system runs the query and generates a downloadable dataset. Returns the job_id for the spatial join request. The geometry column for data elements is specified as `geometry_target` and `geometry_source`. To check the status, refer to the Location header in the response, which includes the URL for the status API endpoint.
         * @summary Performs the spatial join operation on the OSW dataset.
         * @param {OswSpatialjoinBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswSpatialJoin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).publishOswFile(tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file 
         * @param {string} tdei_dataset_id tdei_dataset_id for a dataset, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return OSWApiFp(configuration).qualityMetricTagForm(file, tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * This path allows a user to upload pre-release osw dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary upload a pre-release of OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. Returns the job_id for validation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).validateOswFileForm(dataset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OSWApi - object-oriented interface
 * @export
 * @class OSWApi
 * @extends {BaseAPI}
 */
export class OSWApi extends BaseAPI {
    /**
     * Given a dataset tdei_dataset_id returns the subgraph within a given bounding box (xmin, ymin, ymax, xmax). Returns the job_id for convert request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary Given a dataset tdei_dataset_id returns the subgraph within a given bounding box.
     * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
     * @param {string} file_type Output file type for a file
     * @param {Array<number>} bbox A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds the \"incline\" tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag. Returns the job_id for the incline calculation request.
     * @summary Adds the incline tag to the dataset
     * @param {string} tdei_dataset_id tdei_dataset_id for a dataset, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).datasetTagIncline(tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Given a target dataset, tags the sidewalks with the road network from source dataset which is within the buffer of 5 meters from the sidewalk.
     * @summary Given a target dataset, tags the sidewalks with the road network from source dataset.
     * @param {string} source_dataset_id Dataset from which the road network to be retrieved
     * @param {string} target_dataset_id Dataset for which the road network is to be tagged
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * returns a specific osw file as zip containing metadata, dataset, and changeset identified by the tdei_dataset_id
     * @summary downloads the OSW files as zip
     * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
     * @param {string} [format] File format to download. Default to osw
     * @param {string} [file_version] File version to download. Default to latest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OSWApiFp(this.configuration).getOswFile(tdei_dataset_id, format, file_version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the versions of OSW data which are supported by TDEI.
     * @summary List available OSW versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async listOswVersions(options?: AxiosRequestConfig) : Promise<AxiosResponse<VersionList>> {
        return OSWApiFp(this.configuration).listOswVersions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions. Returns the job_id for confidence calculation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary Initiate Confidence calculation for a dataset
     * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * upload a file and request for file format conversion. Returns the job_id for convert request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary OSW reformatting on demand
     * @param {string} source 
     * @param {string} target 
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswOnDemandFormatForm(source: string, target: string, file: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswOnDemandFormatForm(source, target, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates the Intersection Quality calculation for requested tdei_dataset_id with optional intersection polygon file. Returns the job_id for quality metric calculation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary Initiate Intersection Quality metric calculation for a dataset
     * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswQualityCalculateForm(tdei_dataset_id, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Executes a spatial join operation on the OSW dataset. Based on the provided spatial join input parameters, the system runs the query and generates a downloadable dataset. Returns the job_id for the spatial join request. The geometry column for data elements is specified as `geometry_target` and `geometry_source`. To check the status, refer to the Location header in the response, which includes the URL for the status API endpoint.
     * @summary Performs the spatial join operation on the OSW dataset.
     * @param {OswSpatialjoinBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswSpatialJoin(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary Publishes the OSW dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id tdei_dataset_id for a file, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).publishOswFile(tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Returns the tag quality metric for the dataset element tags.
     * @summary Calculates the quality metric on a dataset element tags
     * @param {Blob} file 
     * @param {string} tdei_dataset_id tdei_dataset_id for a dataset, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return OSWApiFp(this.configuration).qualityMetricTagForm(file, tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This path allows a user to upload pre-release osw dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the job_id of the uploaded file. For checking the status of the upload, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary upload a pre-release of OSW dataset.
     * @param {Blob} dataset 
     * @param {Blob} metadata 
     * @param {Blob} changeset 
     * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
     * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user to validate osw dataset to check the correctness of data. Returns the job_id for validation request. For checking the status, refer to the Location header in the response, which contains the URL for the status API endpoint.
     * @summary Validates the osw dataset.
     * @param {Blob} dataset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).validateOswFileForm(dataset, options).then((request) => request(this.axios, this.basePath));
    }
}
