/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway Dev API
 * This is an API for interacting with the Transportation Data Equity Initiative (TDEI) system. It is intended for applications submitting data to and consuming data from the TDEI system. We currently support GTFS-Pathways, GTFS-Flex and OpenSidewalks (OSW) data schemas.
 *
 * OpenAPI spec version: v0.1
 * Contact: tdei@uw.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { OswSpatialjoinBody } from '../models';
import { OswUnionBody } from '../models';
import { QualityMetricTagResponse } from '../models';
import { VersionList } from '../models';
/**
 * OSWApi - axios parameter creator
 * @export
 */
export const OSWApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Returns a subgraph dataset that falls within a specified bounding box
         * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
         * @param {string} file_type Dataset output file type.
         * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetBbox: async (tdei_dataset_id: string, file_type: string, bbox: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling datasetBbox.');
            }
            // verify required parameter 'file_type' is not null or undefined
            if (file_type === null || file_type === undefined) {
                throw new RequiredError('file_type','Required parameter file_type was null or undefined when calling datasetBbox.');
            }
            // verify required parameter 'bbox' is not null or undefined
            if (bbox === null || bbox === undefined) {
                throw new RequiredError('bbox','Required parameter bbox was null or undefined when calling datasetBbox.');
            }
            const localVarPath = `/api/v1/osw/dataset-bbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tdei_dataset_id !== undefined) {
                localVarQueryParameter['tdei_dataset_id'] = tdei_dataset_id;
            }

            if (file_type !== undefined) {
                localVarQueryParameter['file_type'] = file_type;
            }

            if (bbox) {
                localVarQueryParameter['bbox'] = bbox;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagIncline: async (tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling datasetTagIncline.');
            }
            const localVarPath = `/api/v1/osw/dataset-inclination/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Tags the sidewalks with the road network within proximity.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetTagRoad: async (source_dataset_id: string, target_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'source_dataset_id' is not null or undefined
            if (source_dataset_id === null || source_dataset_id === undefined) {
                throw new RequiredError('source_dataset_id','Required parameter source_dataset_id was null or undefined when calling datasetTagRoad.');
            }
            // verify required parameter 'target_dataset_id' is not null or undefined
            if (target_dataset_id === null || target_dataset_id === undefined) {
                throw new RequiredError('target_dataset_id','Required parameter target_dataset_id was null or undefined when calling datasetTagRoad.');
            }
            const localVarPath = `/api/v1/osw/dataset-tag-road`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (source_dataset_id !== undefined) {
                localVarQueryParameter['source_dataset_id'] = source_dataset_id;
            }

            if (target_dataset_id !== undefined) {
                localVarQueryParameter['target_dataset_id'] = target_dataset_id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
         * @summary Downloads the OSW dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
         * @param {string} [file_version] The system supports two versions for the OSW dataset: Latest and Original.The Latest version includes any recent modifications, while the Original version is the one initially uploaded when creating the dataset. By default, the latest version is downloaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOswFile: async (tdei_dataset_id: string, format?: string, file_version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling getOswFile.');
            }
            const localVarPath = `/api/v1/osw/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (file_version !== undefined) {
                localVarQueryParameter['file_version'] = file_version;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOswVersions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/osw/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate confidence calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswConfidenceCalculateForm: async (tdei_dataset_id: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling oswConfidenceCalculateForm.');
            }
            const localVarPath = `/api/v1/osw/confidence/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary OSW dataset conversion on demand
         * @param {Blob} file 
         * @param {string} source_format 
         * @param {string} target_format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswOnDemandFormatForm: async (file: Blob, source_format: string, target_format: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling oswOnDemandFormatForm.');
            }
            // verify required parameter 'source_format' is not null or undefined
            if (source_format === null || source_format === undefined) {
                throw new RequiredError('source_format','Required parameter source_format was null or undefined when calling oswOnDemandFormatForm.');
            }
            // verify required parameter 'target_format' is not null or undefined
            if (target_format === null || target_format === undefined) {
                throw new RequiredError('target_format','Required parameter target_format was null or undefined when calling oswOnDemandFormatForm.');
            }
            const localVarPath = `/api/v1/osw/convert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            if (source_format !== undefined) { 
                localVarFormParams.append('source_format', source_format as any);
            }

            if (target_format !== undefined) { 
                localVarFormParams.append('target_format', target_format as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswQualityCalculateForm: async (tdei_dataset_id: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling oswQualityCalculateForm.');
            }
            const localVarPath = `/api/v1/osw/quality-metric/ixn/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a spatial join operation between two datasets within the TDEI system.
         * @param {OswSpatialjoinBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswSpatialJoin: async (body: OswSpatialjoinBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oswSpatialJoin.');
            }
            const localVarPath = `/api/v1/osw/spatial-join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This operation performs a union of two specified OSW datasets, effectively merging their data into a single dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a union of the two input OSW datasets.
         * @param {OswUnionBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswUnion: async (body: OswUnionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oswUnion.');
            }
            const localVarPath = `/api/v1/osw/union`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishOswFile: async (tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling publishOswFile.');
            }
            const localVarPath = `/api/v1/osw/publish/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file 
         * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qualityMetricTagForm: async (file: Blob, tdei_dataset_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling qualityMetricTagForm.');
            }
            // verify required parameter 'tdei_dataset_id' is not null or undefined
            if (tdei_dataset_id === null || tdei_dataset_id === undefined) {
                throw new RequiredError('tdei_dataset_id','Required parameter tdei_dataset_id was null or undefined when calling qualityMetricTagForm.');
            }
            const localVarPath = `/api/v1/osw/quality-metric/tag/{tdei_dataset_id}`
                .replace(`{${"tdei_dataset_id"}}`, encodeURIComponent(String(tdei_dataset_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
         * @summary Upload a OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOswFileForm: async (dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'metadata' is not null or undefined
            if (metadata === null || metadata === undefined) {
                throw new RequiredError('metadata','Required parameter metadata was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'changeset' is not null or undefined
            if (changeset === null || changeset === undefined) {
                throw new RequiredError('changeset','Required parameter changeset was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'tdei_project_group_id' is not null or undefined
            if (tdei_project_group_id === null || tdei_project_group_id === undefined) {
                throw new RequiredError('tdei_project_group_id','Required parameter tdei_project_group_id was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'tdei_service_id' is not null or undefined
            if (tdei_service_id === null || tdei_service_id === undefined) {
                throw new RequiredError('tdei_service_id','Required parameter tdei_service_id was null or undefined when calling uploadOswFileForm.');
            }
            const localVarPath = `/api/v1/osw/upload/{tdei_project_group_id}/{tdei_service_id}`
                .replace(`{${"tdei_project_group_id"}}`, encodeURIComponent(String(tdei_project_group_id)))
                .replace(`{${"tdei_service_id"}}`, encodeURIComponent(String(tdei_service_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (derived_from_dataset_id !== undefined) {
                localVarQueryParameter['derived_from_dataset_id'] = derived_from_dataset_id;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', metadata as any);
            }

            if (changeset !== undefined) { 
                localVarFormParams.append('changeset', changeset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOswFileForm: async (dataset: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling validateOswFileForm.');
            }
            const localVarPath = `/api/v1/osw/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OSWApi - functional programming interface
 * @export
 */
export const OSWApiFp = function(configuration?: Configuration) {
    return {
        /**
         * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Returns a subgraph dataset that falls within a specified bounding box
         * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
         * @param {string} file_type Dataset output file type.
         * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).datasetTagIncline(tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Tags the sidewalks with the road network within proximity.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
         * @summary Downloads the OSW dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
         * @param {string} [file_version] The system supports two versions for the OSW dataset: Latest and Original.The Latest version includes any recent modifications, while the Original version is the one initially uploaded when creating the dataset. By default, the latest version is downloaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).getOswFile(tdei_dataset_id, format, file_version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOswVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VersionList>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).listOswVersions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate confidence calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary OSW dataset conversion on demand
         * @param {Blob} file 
         * @param {string} source_format 
         * @param {string} target_format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswOnDemandFormatForm(file: Blob, source_format: string, target_format: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswOnDemandFormatForm(file, source_format, target_format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswQualityCalculateForm(tdei_dataset_id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a spatial join operation between two datasets within the TDEI system.
         * @param {OswSpatialjoinBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswSpatialJoin(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This operation performs a union of two specified OSW datasets, effectively merging their data into a single dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a union of the two input OSW datasets.
         * @param {OswUnionBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswUnion(body: OswUnionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswUnion(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).publishOswFile(tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file 
         * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).qualityMetricTagForm(file, tdei_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
         * @summary Upload a OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).validateOswFileForm(dataset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OSWApi - factory interface
 * @export
 */
export const OSWApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Returns a subgraph dataset that falls within a specified bounding box
         * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
         * @param {string} file_type Dataset output file type.
         * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Adds the incline tag to the dataset
         * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).datasetTagIncline(tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Tags the sidewalks with the road network within proximity.
         * @param {string} source_dataset_id Dataset from which the road network to be retrieved
         * @param {string} target_dataset_id Dataset for which the road network is to be tagged
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
         * @summary Downloads the OSW dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
         * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
         * @param {string} [file_version] The system supports two versions for the OSW dataset: Latest and Original.The Latest version includes any recent modifications, while the Original version is the one initially uploaded when creating the dataset. By default, the latest version is downloaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OSWApiFp(configuration).getOswFile(tdei_dataset_id, format, file_version, options).then((request) => request(axios, basePath));
        },
        /**
         * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOswVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<VersionList>> {
            return OSWApiFp(configuration).listOswVersions(options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate confidence calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary OSW dataset conversion on demand
         * @param {Blob} file 
         * @param {string} source_format 
         * @param {string} target_format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswOnDemandFormatForm(file: Blob, source_format: string, target_format: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswOnDemandFormatForm(file, source_format, target_format, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Initiate Intersection Quality metric calculation for a dataset
         * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswQualityCalculateForm(tdei_dataset_id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a spatial join operation between two datasets within the TDEI system.
         * @param {OswSpatialjoinBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswSpatialJoin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This operation performs a union of two specified OSW datasets, effectively merging their data into a single dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Performs a union of the two input OSW datasets.
         * @param {OswUnionBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswUnion(body: OswUnionBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).oswUnion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Publishes the OSW dataset for the tdei_dataset_id
         * @param {string} tdei_dataset_id Dataset id of the dataset to be published. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).publishOswFile(tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
         * @summary Calculates the quality metric on a dataset element tags
         * @param {Blob} file 
         * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return OSWApiFp(configuration).qualityMetricTagForm(file, tdei_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
         * @summary Upload a OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
         * @param {string} tdei_service_id TDEI service id associated with the above project group id.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).validateOswFileForm(dataset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OSWApi - object-oriented interface
 * @export
 * @class OSWApi
 * @extends {BaseAPI}
 */
export class OSWApi extends BaseAPI {
    /**
     * When provided with a tdei_dataset_id, this request returns a subgraph dataset that falls within a specified bounding box defined by the coordinates (xmin, ymin, ymax, xmax). The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Returns a subgraph dataset that falls within a specified bounding box
     * @param {string} tdei_dataset_id Dataset ID to which the bounding box will be applied.
     * @param {string} file_type Dataset output file type.
     * @param {Array<number>} bbox A bounding box defines the search area by specifying the latitude and longitude coordinates of its corners. These coordinates should be provided as a string in the order: west (longitude), south (latitude), east (longitude), north (latitude). This format outlines the geographical area to be searched within the defined perimeter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async datasetBbox(tdei_dataset_id: string, file_type: string, bbox: Array<number>, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).datasetBbox(tdei_dataset_id, file_type, bbox, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds the **incline** tag to a specified dataset identified by the tdei_dataset_id. It takes the dataset ID as a parameter, processes the dataset to calculate the incline information, and updates the dataset with the incline tag.The original data of the dataset will be modified in this request.If the original data already has incline tag, it will be replaced. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Adds the incline tag to the dataset
     * @param {string} tdei_dataset_id Dataset ID for calculating the dataset inclination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async datasetTagIncline(tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).datasetTagIncline(tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This process involves associating sidewalks from a target dataset with the road network from a source dataset based on proximity. Specifically, any part of the road network that is within a 5-meter buffer zone around the sidewalks in the target dataset gets tagged accordingly. This method ensures that sidewalks are accurately mapped in relation to nearby roads, facilitating better data integration and analysis between different geographic datasets.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Tags the sidewalks with the road network within proximity.
     * @param {string} source_dataset_id Dataset from which the road network to be retrieved
     * @param {string} target_dataset_id Dataset for which the road network is to be tagged
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async datasetTagRoad(source_dataset_id: string, target_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).datasetTagRoad(source_dataset_id, target_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Downloads a specific OSW dataset as a zip file, which includes `{nodes, edges, points}.geojson` files. If file extensions are specified, the zip will contain `{nodes, edges, points}.extension.geojson` files, as well as metadata and a changeset file, if available.
     * @summary Downloads the OSW dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset to be downloaded.
     * @param {string} [format] The system maintains two formats for the OSW dataset: OSW and OSM. By default, the OSW format is downloaded.
     * @param {string} [file_version] The system supports two versions for the OSW dataset: Latest and Original.The Latest version includes any recent modifications, while the Original version is the one initially uploaded when creating the dataset. By default, the latest version is downloaded.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async getOswFile(tdei_dataset_id: string, format?: string, file_version?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OSWApiFp(this.configuration).getOswFile(tdei_dataset_id, format, file_version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List of OSW data standard versions supported by TDEI. The response includes a link to the OSW data standard and specification.
     * @summary List available OSW versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async listOswVersions(options?: AxiosRequestConfig) : Promise<AxiosResponse<VersionList>> {
        return OSWApiFp(this.configuration).listOswVersions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates the confidence calculation for requested tdei_dataset_id with optional sub-regions.Sub-regions file is a GeoJSON file containing one or more polygons.If the sub-region file is given as an input, the confidence score of each polygon inside the sub-region file will be calculated.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate confidence calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which confidence is to be calculated.
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswConfidenceCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswConfidenceCalculateForm(tdei_dataset_id, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This request facilitates the conversion of an OSW dataset to OSM format, or vice versa. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary OSW dataset conversion on demand
     * @param {Blob} file 
     * @param {string} source_format 
     * @param {string} target_format 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswOnDemandFormatForm(file: Blob, source_format: string, target_format: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswOnDemandFormatForm(file, source_format, target_format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates the Intersection Quality calculation for requested `tdei_dataset_id` with optional intersection polygon file.Intersection polygon file can be a GeoJSON file containing one or more polygons.If intersection polygon file is not given the system creates vornoi polygons based on the dataset area.It is recommended to add intersection polygon file for better performance. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Initiate Intersection Quality metric calculation for a dataset
     * @param {string} tdei_dataset_id Dataset id of the dataset for which Intersection Quality metric is to be calculated.
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswQualityCalculateForm(tdei_dataset_id: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswQualityCalculateForm(tdei_dataset_id, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Performs a spatial join operation between two datasets within the TDEI system. It involves two datasets, target and source, specifying the spatial dimension entities of each to be joined, such as edges, nodes, zones, points, lines, or polygons. The join operation is guided by specified conditions that define how the geometries of the two datasets interact, typically involving spatial functions like intersections. Additionally, filters can be applied to both datasets to refine the data involved in the join. Aggregate functions are also defined to associate the attributes from source to target dataset entity.The geometry column for data elements is specified as `geometry_target` and `geometry_source`.Eg: Find all light poles in source dataset within 5 m of an edge in target dataset, and associate the attribute highway from source dataset with each edge in target dataset. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a spatial join operation between two datasets within the TDEI system.
     * @param {OswSpatialjoinBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswSpatialJoin(body: OswSpatialjoinBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswSpatialJoin(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This operation performs a union of two specified OSW datasets, effectively merging their data into a single dataset.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Performs a union of the two input OSW datasets.
     * @param {OswUnionBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswUnion(body: OswUnionBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).oswUnion(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Publishes the OSW dataset for the tdei_dataset_id
     * @param {string} tdei_dataset_id Dataset id of the dataset to be published. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async publishOswFile(tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).publishOswFile(tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Calculates the quality metric on a dataset element tags for requested tdei_dataset_id. Tags are the specific attributes or characteristics relevant to the OSW data entity. For example entities like Footway, Crossing, and Sidewalk have tags such as surface, width, incline, and length, indicating attributes like the material, size, slope, and distance. Returns the tag quality metric for the dataset element tags.
     * @summary Calculates the quality metric on a dataset element tags
     * @param {Blob} file 
     * @param {string} tdei_dataset_id Dataset ID for calculating the quality metrics of element tags.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async qualityMetricTagForm(file: Blob, tdei_dataset_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return OSWApiFp(this.configuration).qualityMetricTagForm(file, tdei_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint enables users to upload an OSW dataset. The request must include the required parameters to complete the upload. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint. By default, the dataset's status will be set to 'pre-release.' The dataset can be published using the `/publish` endpoint.
     * @summary Upload a OSW dataset.
     * @param {Blob} dataset 
     * @param {Blob} metadata 
     * @param {Blob} changeset 
     * @param {string} tdei_project_group_id Project group id to which the dataset would be uploaded
     * @param {string} tdei_service_id TDEI service id associated with the above project group id.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user to validate osw dataset to check the correctness of data. The response includes a `job_id` for tracking the request.To check the request status, refer to the location header in the response, which provides the URL for the status API endpoint.
     * @summary Validates the osw dataset.
     * @param {Blob} dataset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).validateOswFileForm(dataset, options).then((request) => request(this.axios, this.basePath));
    }
}
