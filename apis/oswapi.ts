/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway API
 * This is an API for publishing data to the Transportation Data Equity Initiative (TDEI) data system. This API is intended for applications producing data for and consuming data from the TDEI system. This API supports publishing of GTFS-Pathways, GTFS-Flex v2 and OpenSidewalks data to the TDEI.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { OSWConfidenceRequest } from '../models';
import { OSWConfidenceResponse } from '../models';
import { OSWConfidenceStatus } from '../models';
import { OSWFormatResponse } from '../models';
import { OSWFormatStatusResponse } from '../models';
import { OswDownload } from '../models';
import { RecordPublishStatus } from '../models';
import { RecordUploadStatus } from '../models';
import { ValidationStatus } from '../models';
import { VersionList } from '../models';
/**
 * OSWApi - axios parameter creator
 * @export
 */
export const OSWApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns boolean true if the action is successful
         * @summary Invalidates the OSW record
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOsw: async (tdei_record_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_record_id' is not null or undefined
            if (tdei_record_id === null || tdei_record_id === undefined) {
                throw new RequiredError('tdei_record_id','Required parameter tdei_record_id was null or undefined when calling deleteOsw.');
            }
            const localVarPath = `/api/v1/osw/{tdei_record_id}`
                .replace(`{${"tdei_record_id"}}`, encodeURIComponent(String(tdei_record_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the status of confidence request job.
         * @summary Get the status of confidence request
         * @param {string} job_id job_id for confidence request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOSWConfidenceStatus: async (job_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'job_id' is not null or undefined
            if (job_id === null || job_id === undefined) {
                throw new RequiredError('job_id','Required parameter job_id was null or undefined when calling getOSWConfidenceStatus.');
            }
            const localVarPath = `/api/v1/osw/confidence/status/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(job_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * returns a specific osw file as zip containing metadata, dataset, and changeset identified by the tdei_record_id
         * @summary downloads the OSW files as zip
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {string} [format] File format to download. Default to osw
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOswFile: async (tdei_record_id: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_record_id' is not null or undefined
            if (tdei_record_id === null || tdei_record_id === undefined) {
                throw new RequiredError('tdei_record_id','Required parameter tdei_record_id was null or undefined when calling getOswFile.');
            }
            const localVarPath = `/api/v1/osw/{tdei_record_id}`
                .replace(`{${"tdei_record_id"}}`, encodeURIComponent(String(tdei_record_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the status of an published record
         * @summary Get the publish status
         * @param {string} tdei_record_id tdei_record_id received during upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishStatus: async (tdei_record_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_record_id' is not null or undefined
            if (tdei_record_id === null || tdei_record_id === undefined) {
                throw new RequiredError('tdei_record_id','Required parameter tdei_record_id was null or undefined when calling getPublishStatus.');
            }
            const localVarPath = `/api/v1/osw/publish/status/{tdei_record_id}`
                .replace(`{${"tdei_record_id"}}`, encodeURIComponent(String(tdei_record_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the status of an uploaded record
         * @summary Get the upload status
         * @param {string} tdei_record_id tdei_record_id received during upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadStatus: async (tdei_record_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_record_id' is not null or undefined
            if (tdei_record_id === null || tdei_record_id === undefined) {
                throw new RequiredError('tdei_record_id','Required parameter tdei_record_id was null or undefined when calling getUploadStatus.');
            }
            const localVarPath = `/api/v1/osw/upload/status/{tdei_record_id}`
                .replace(`{${"tdei_record_id"}}`, encodeURIComponent(String(tdei_record_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the status of the validation request job.
         * @summary Get the status of the validation request.
         * @param {string} job_id job_id for the validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidateStatus: async (job_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'job_id' is not null or undefined
            if (job_id === null || job_id === undefined) {
                throw new RequiredError('job_id','Required parameter job_id was null or undefined when calling getValidateStatus.');
            }
            const localVarPath = `/api/v1/osw/validate/status/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(job_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of url to zipped geojson files with osw data that meet the specified criteria. Criteria that can be specified include: a dataset area (polygon), minimum confidence level and osw version.
         * @summary List osw files meeting criteria.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [name] dataset name or title.
         * @param {string} [version] dataset version.
         * @param {string} [status] request for files based on status. The default setting is &#x27;Publish&#x27;, limiting the list to published files only. When set to &#x27;pre-release&#x27;, it includes pre-release files for the project groups user belongs. 
         * @param {string} [osw_schema_version] version name of the osw schema version that the application requests. list of versions can be found with /api/v1/osw/versions.
         * @param {string} [tdei_project_group_id] tdei-assigned project group id. Represented as a UUID.
         * @param {string} [date_time] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_record_id] tdei_record_id, unique id represents file.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOswFiles: async (bbox?: Array<number>, name?: string, version?: string, status?: string, osw_schema_version?: string, tdei_project_group_id?: string, date_time?: string, tdei_record_id?: string, page_no?: number, page_size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/osw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bbox) {
                localVarQueryParameter['bbox'] = bbox;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (osw_schema_version !== undefined) {
                localVarQueryParameter['osw_schema_version'] = osw_schema_version;
            }

            if (tdei_project_group_id !== undefined) {
                localVarQueryParameter['tdei_project_group_id'] = tdei_project_group_id;
            }

            if (date_time !== undefined) {
                localVarQueryParameter['date_time'] = date_time;
            }

            if (tdei_record_id !== undefined) {
                localVarQueryParameter['tdei_record_id'] = tdei_record_id;
            }

            if (page_no !== undefined) {
                localVarQueryParameter['page_no'] = page_no;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the versions of OSW data which are supported by TDEI.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOswVersions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/osw/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the confidence calculation of a tdei_record_id as mentioned in the body
         * @summary Initiate Confidence calculation for a dataset
         * @param {OSWConfidenceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswConfidenceCalculate: async (body: OSWConfidenceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oswConfidenceCalculate.');
            }
            const localVarPath = `/api/v1/osw/confidence/calculate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Downloads the converted file from the job
         * @summary Downloads the converted file
         * @param {string} job_id job_id for format request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswFormatDownload: async (job_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'job_id' is not null or undefined
            if (job_id === null || job_id === undefined) {
                throw new RequiredError('job_id','Required parameter job_id was null or undefined when calling oswFormatDownload.');
            }
            const localVarPath = `/api/v1/osw/convert/download/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(job_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Summary of the formatting request
         * @summary Fetch status of format request
         * @param {string} job_id job_id for format request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswFormatStatus: async (job_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'job_id' is not null or undefined
            if (job_id === null || job_id === undefined) {
                throw new RequiredError('job_id','Required parameter job_id was null or undefined when calling oswFormatStatus.');
            }
            const localVarPath = `/api/v1/osw/convert/status/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(job_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * upload a file and request for file format conversion
         * @summary OSW reformatting on demand
         * @param {string} source 
         * @param {string} target 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oswOnDemandFormatForm: async (source: string, target: string, file: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'source' is not null or undefined
            if (source === null || source === undefined) {
                throw new RequiredError('source','Required parameter source was null or undefined when calling oswOnDemandFormatForm.');
            }
            // verify required parameter 'target' is not null or undefined
            if (target === null || target === undefined) {
                throw new RequiredError('target','Required parameter target was null or undefined when calling oswOnDemandFormatForm.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling oswOnDemandFormatForm.');
            }
            const localVarPath = `/api/v1/osw/convert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (source !== undefined) { 
                localVarFormParams.append('source', source as any);
            }

            if (target !== undefined) { 
                localVarFormParams.append('target', target as any);
            }

            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.
         * @summary Publishes the OSW dataset for the tdei_record_id
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishOswFile: async (tdei_record_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tdei_record_id' is not null or undefined
            if (tdei_record_id === null || tdei_record_id === undefined) {
                throw new RequiredError('tdei_record_id','Required parameter tdei_record_id was null or undefined when calling publishOswFile.');
            }
            const localVarPath = `/api/v1/osw/publish/{tdei_record_id}`
                .replace(`{${"tdei_record_id"}}`, encodeURIComponent(String(tdei_record_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This path allows a user to upload pre-release osw dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a pre-release of OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOswFileForm: async (dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'metadata' is not null or undefined
            if (metadata === null || metadata === undefined) {
                throw new RequiredError('metadata','Required parameter metadata was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'changeset' is not null or undefined
            if (changeset === null || changeset === undefined) {
                throw new RequiredError('changeset','Required parameter changeset was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'tdei_project_group_id' is not null or undefined
            if (tdei_project_group_id === null || tdei_project_group_id === undefined) {
                throw new RequiredError('tdei_project_group_id','Required parameter tdei_project_group_id was null or undefined when calling uploadOswFileForm.');
            }
            // verify required parameter 'tdei_service_id' is not null or undefined
            if (tdei_service_id === null || tdei_service_id === undefined) {
                throw new RequiredError('tdei_service_id','Required parameter tdei_service_id was null or undefined when calling uploadOswFileForm.');
            }
            const localVarPath = `/api/v1/osw/upload/{tdei_project_group_id}/{tdei_service_id}`
                .replace(`{${"tdei_project_group_id"}}`, encodeURIComponent(String(tdei_project_group_id)))
                .replace(`{${"tdei_service_id"}}`, encodeURIComponent(String(tdei_service_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (derived_from_dataset_id !== undefined) {
                localVarQueryParameter['derived_from_dataset_id'] = derived_from_dataset_id;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', metadata as any);
            }

            if (changeset !== undefined) { 
                localVarFormParams.append('changeset', changeset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. Returns the job_id associated with validation job.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOswFileForm: async (dataset: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling validateOswFileForm.');
            }
            const localVarPath = `/api/v1/osw/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (dataset !== undefined) { 
                localVarFormParams.append('dataset', dataset as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OSWApi - functional programming interface
 * @export
 */
export const OSWApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns boolean true if the action is successful
         * @summary Invalidates the OSW record
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOsw(tdei_record_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).deleteOsw(tdei_record_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the status of confidence request job.
         * @summary Get the status of confidence request
         * @param {string} job_id job_id for confidence request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOSWConfidenceStatus(job_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OSWConfidenceStatus>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).getOSWConfidenceStatus(job_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * returns a specific osw file as zip containing metadata, dataset, and changeset identified by the tdei_record_id
         * @summary downloads the OSW files as zip
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {string} [format] File format to download. Default to osw
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOswFile(tdei_record_id: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).getOswFile(tdei_record_id, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the status of an published record
         * @summary Get the publish status
         * @param {string} tdei_record_id tdei_record_id received during upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishStatus(tdei_record_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RecordPublishStatus>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).getPublishStatus(tdei_record_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the status of an uploaded record
         * @summary Get the upload status
         * @param {string} tdei_record_id tdei_record_id received during upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadStatus(tdei_record_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RecordUploadStatus>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).getUploadStatus(tdei_record_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the status of the validation request job.
         * @summary Get the status of the validation request.
         * @param {string} job_id job_id for the validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidateStatus(job_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ValidationStatus>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).getValidateStatus(job_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns a list of url to zipped geojson files with osw data that meet the specified criteria. Criteria that can be specified include: a dataset area (polygon), minimum confidence level and osw version.
         * @summary List osw files meeting criteria.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [name] dataset name or title.
         * @param {string} [version] dataset version.
         * @param {string} [status] request for files based on status. The default setting is &#x27;Publish&#x27;, limiting the list to published files only. When set to &#x27;pre-release&#x27;, it includes pre-release files for the project groups user belongs. 
         * @param {string} [osw_schema_version] version name of the osw schema version that the application requests. list of versions can be found with /api/v1/osw/versions.
         * @param {string} [tdei_project_group_id] tdei-assigned project group id. Represented as a UUID.
         * @param {string} [date_time] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_record_id] tdei_record_id, unique id represents file.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOswFiles(bbox?: Array<number>, name?: string, version?: string, status?: string, osw_schema_version?: string, tdei_project_group_id?: string, date_time?: string, tdei_record_id?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<OswDownload>>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).listOswFiles(bbox, name, version, status, osw_schema_version, tdei_project_group_id, date_time, tdei_record_id, page_no, page_size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists the versions of OSW data which are supported by TDEI.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOswVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VersionList>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).listOswVersions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Initiates the confidence calculation of a tdei_record_id as mentioned in the body
         * @summary Initiate Confidence calculation for a dataset
         * @param {OSWConfidenceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswConfidenceCalculate(body: OSWConfidenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OSWConfidenceResponse>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswConfidenceCalculate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Downloads the converted file from the job
         * @summary Downloads the converted file
         * @param {string} job_id job_id for format request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswFormatDownload(job_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswFormatDownload(job_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Summary of the formatting request
         * @summary Fetch status of format request
         * @param {string} job_id job_id for format request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswFormatStatus(job_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OSWFormatStatusResponse>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswFormatStatus(job_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * upload a file and request for file format conversion
         * @summary OSW reformatting on demand
         * @param {string} source 
         * @param {string} target 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswOnDemandFormatForm(source: string, target: string, file: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OSWFormatResponse>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).oswOnDemandFormatForm(source, target, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.
         * @summary Publishes the OSW dataset for the tdei_record_id
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishOswFile(tdei_record_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).publishOswFile(tdei_record_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This path allows a user to upload pre-release osw dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a pre-release of OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. Returns the job_id associated with validation job.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OSWApiAxiosParamCreator(configuration).validateOswFileForm(dataset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OSWApi - factory interface
 * @export
 */
export const OSWApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns boolean true if the action is successful
         * @summary Invalidates the OSW record
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOsw(tdei_record_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return OSWApiFp(configuration).deleteOsw(tdei_record_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the status of confidence request job.
         * @summary Get the status of confidence request
         * @param {string} job_id job_id for confidence request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOSWConfidenceStatus(job_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OSWConfidenceStatus>> {
            return OSWApiFp(configuration).getOSWConfidenceStatus(job_id, options).then((request) => request(axios, basePath));
        },
        /**
         * returns a specific osw file as zip containing metadata, dataset, and changeset identified by the tdei_record_id
         * @summary downloads the OSW files as zip
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {string} [format] File format to download. Default to osw
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOswFile(tdei_record_id: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OSWApiFp(configuration).getOswFile(tdei_record_id, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the status of an published record
         * @summary Get the publish status
         * @param {string} tdei_record_id tdei_record_id received during upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishStatus(tdei_record_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RecordPublishStatus>> {
            return OSWApiFp(configuration).getPublishStatus(tdei_record_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the status of an uploaded record
         * @summary Get the upload status
         * @param {string} tdei_record_id tdei_record_id received during upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadStatus(tdei_record_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RecordUploadStatus>> {
            return OSWApiFp(configuration).getUploadStatus(tdei_record_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the status of the validation request job.
         * @summary Get the status of the validation request.
         * @param {string} job_id job_id for the validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidateStatus(job_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ValidationStatus>> {
            return OSWApiFp(configuration).getValidateStatus(job_id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of url to zipped geojson files with osw data that meet the specified criteria. Criteria that can be specified include: a dataset area (polygon), minimum confidence level and osw version.
         * @summary List osw files meeting criteria.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [name] dataset name or title.
         * @param {string} [version] dataset version.
         * @param {string} [status] request for files based on status. The default setting is &#x27;Publish&#x27;, limiting the list to published files only. When set to &#x27;pre-release&#x27;, it includes pre-release files for the project groups user belongs. 
         * @param {string} [osw_schema_version] version name of the osw schema version that the application requests. list of versions can be found with /api/v1/osw/versions.
         * @param {string} [tdei_project_group_id] tdei-assigned project group id. Represented as a UUID.
         * @param {string} [date_time] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_record_id] tdei_record_id, unique id represents file.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOswFiles(bbox?: Array<number>, name?: string, version?: string, status?: string, osw_schema_version?: string, tdei_project_group_id?: string, date_time?: string, tdei_record_id?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<OswDownload>>> {
            return OSWApiFp(configuration).listOswFiles(bbox, name, version, status, osw_schema_version, tdei_project_group_id, date_time, tdei_record_id, page_no, page_size, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the versions of OSW data which are supported by TDEI.
         * @summary List available OSW versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOswVersions(options?: AxiosRequestConfig): Promise<AxiosResponse<VersionList>> {
            return OSWApiFp(configuration).listOswVersions(options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the confidence calculation of a tdei_record_id as mentioned in the body
         * @summary Initiate Confidence calculation for a dataset
         * @param {OSWConfidenceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswConfidenceCalculate(body: OSWConfidenceRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<OSWConfidenceResponse>> {
            return OSWApiFp(configuration).oswConfidenceCalculate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Downloads the converted file from the job
         * @summary Downloads the converted file
         * @param {string} job_id job_id for format request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswFormatDownload(job_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OSWApiFp(configuration).oswFormatDownload(job_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Summary of the formatting request
         * @summary Fetch status of format request
         * @param {string} job_id job_id for format request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswFormatStatus(job_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OSWFormatStatusResponse>> {
            return OSWApiFp(configuration).oswFormatStatus(job_id, options).then((request) => request(axios, basePath));
        },
        /**
         * upload a file and request for file format conversion
         * @summary OSW reformatting on demand
         * @param {string} source 
         * @param {string} target 
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oswOnDemandFormatForm(source: string, target: string, file: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<OSWFormatResponse>> {
            return OSWApiFp(configuration).oswOnDemandFormatForm(source, target, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.
         * @summary Publishes the OSW dataset for the tdei_record_id
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishOswFile(tdei_record_id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).publishOswFile(tdei_record_id, options).then((request) => request(axios, basePath));
        },
        /**
         * This path allows a user to upload pre-release osw dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a pre-release of OSW dataset.
         * @param {Blob} dataset 
         * @param {Blob} metadata 
         * @param {Blob} changeset 
         * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
         * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
         * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to validate osw dataset to check the correctness of data. Returns the job_id associated with validation job.
         * @summary Validates the osw dataset.
         * @param {Blob} dataset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OSWApiFp(configuration).validateOswFileForm(dataset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OSWApi - object-oriented interface
 * @export
 * @class OSWApi
 * @extends {BaseAPI}
 */
export class OSWApi extends BaseAPI {
    /**
     * Returns boolean true if the action is successful
     * @summary Invalidates the OSW record
     * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async deleteOsw(tdei_record_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return OSWApiFp(this.configuration).deleteOsw(tdei_record_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the status of confidence request job.
     * @summary Get the status of confidence request
     * @param {string} job_id job_id for confidence request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async getOSWConfidenceStatus(job_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OSWConfidenceStatus>> {
        return OSWApiFp(this.configuration).getOSWConfidenceStatus(job_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * returns a specific osw file as zip containing metadata, dataset, and changeset identified by the tdei_record_id
     * @summary downloads the OSW files as zip
     * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
     * @param {string} [format] File format to download. Default to osw
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async getOswFile(tdei_record_id: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OSWApiFp(this.configuration).getOswFile(tdei_record_id, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the status of an published record
     * @summary Get the publish status
     * @param {string} tdei_record_id tdei_record_id received during upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async getPublishStatus(tdei_record_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RecordPublishStatus>> {
        return OSWApiFp(this.configuration).getPublishStatus(tdei_record_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the status of an uploaded record
     * @summary Get the upload status
     * @param {string} tdei_record_id tdei_record_id received during upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async getUploadStatus(tdei_record_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RecordUploadStatus>> {
        return OSWApiFp(this.configuration).getUploadStatus(tdei_record_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the status of the validation request job.
     * @summary Get the status of the validation request.
     * @param {string} job_id job_id for the validation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async getValidateStatus(job_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ValidationStatus>> {
        return OSWApiFp(this.configuration).getValidateStatus(job_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of url to zipped geojson files with osw data that meet the specified criteria. Criteria that can be specified include: a dataset area (polygon), minimum confidence level and osw version.
     * @summary List osw files meeting criteria.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [name] dataset name or title.
     * @param {string} [version] dataset version.
     * @param {string} [status] request for files based on status. The default setting is &#x27;Publish&#x27;, limiting the list to published files only. When set to &#x27;pre-release&#x27;, it includes pre-release files for the project groups user belongs. 
     * @param {string} [osw_schema_version] version name of the osw schema version that the application requests. list of versions can be found with /api/v1/osw/versions.
     * @param {string} [tdei_project_group_id] tdei-assigned project group id. Represented as a UUID.
     * @param {string} [date_time] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
     * @param {string} [tdei_record_id] tdei_record_id, unique id represents file.
     * @param {number} [page_no] Integer, defaults to 1.
     * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async listOswFiles(bbox?: Array<number>, name?: string, version?: string, status?: string, osw_schema_version?: string, tdei_project_group_id?: string, date_time?: string, tdei_record_id?: string, page_no?: number, page_size?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<OswDownload>>> {
        return OSWApiFp(this.configuration).listOswFiles(bbox, name, version, status, osw_schema_version, tdei_project_group_id, date_time, tdei_record_id, page_no, page_size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the versions of OSW data which are supported by TDEI.
     * @summary List available OSW versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async listOswVersions(options?: AxiosRequestConfig) : Promise<AxiosResponse<VersionList>> {
        return OSWApiFp(this.configuration).listOswVersions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates the confidence calculation of a tdei_record_id as mentioned in the body
     * @summary Initiate Confidence calculation for a dataset
     * @param {OSWConfidenceRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswConfidenceCalculate(body: OSWConfidenceRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<OSWConfidenceResponse>> {
        return OSWApiFp(this.configuration).oswConfidenceCalculate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Downloads the converted file from the job
     * @summary Downloads the converted file
     * @param {string} job_id job_id for format request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswFormatDownload(job_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OSWApiFp(this.configuration).oswFormatDownload(job_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Summary of the formatting request
     * @summary Fetch status of format request
     * @param {string} job_id job_id for format request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswFormatStatus(job_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OSWFormatStatusResponse>> {
        return OSWApiFp(this.configuration).oswFormatStatus(job_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * upload a file and request for file format conversion
     * @summary OSW reformatting on demand
     * @param {string} source 
     * @param {string} target 
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async oswOnDemandFormatForm(source: string, target: string, file: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<OSWFormatResponse>> {
        return OSWApiFp(this.configuration).oswOnDemandFormatForm(source, target, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publishes an OSW dataset that was previously uploaded via the [POST] /osw endpoint, marking it as an official release for the mobility service. This official release status ensures visibility to all TDEI data consumers.
     * @summary Publishes the OSW dataset for the tdei_record_id
     * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async publishOswFile(tdei_record_id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).publishOswFile(tdei_record_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This path allows a user to upload pre-release osw dataset. The caller must provide metadata about the file - includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
     * @summary upload a pre-release of OSW dataset.
     * @param {Blob} dataset 
     * @param {Blob} metadata 
     * @param {Blob} changeset 
     * @param {string} tdei_project_group_id tdei project group id. Represented as UUID.
     * @param {string} tdei_service_id tdei service id associated with project group id. Represented as UUID.
     * @param {string} [derived_from_dataset_id] Dataset id from which this dataset was derived
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async uploadOswFileForm(dataset: Blob, metadata: Blob, changeset: Blob, tdei_project_group_id: string, tdei_service_id: string, derived_from_dataset_id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).uploadOswFileForm(dataset, metadata, changeset, tdei_project_group_id, tdei_service_id, derived_from_dataset_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user to validate osw dataset to check the correctness of data. Returns the job_id associated with validation job.
     * @summary Validates the osw dataset.
     * @param {Blob} dataset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSWApi
     */
    public async validateOswFileForm(dataset: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OSWApiFp(this.configuration).validateOswFileForm(dataset, options).then((request) => request(this.axios, this.basePath));
    }
}
